{
  "openapi": "3.0.0",
  "info": {
    "title": "Verbwire API documentation",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.verbwire.com/v1"
    }
  ],
  "paths": {
    "/nft/data/isWalletHolderOfToken": {
      "get": {
        "summary": "Get is the wallet address a holder of a token?",
        "description": "Returns true/false if the wallet address is a holder of the token, as well as token count and token ids",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "walletAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Wallet address to query"
          },
          {
            "in": "query",
            "name": "contractAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Contract address to query against"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "sepolia",
                "mumbai",
                "fuji",
                "optimism-sepolia",
                "arbitrum-sepolia",
                "base-sepolia",
                "fantom-testnet",
                "ethereum",
                "polygon",
                "avalanche",
                "optimism",
                "arbitrum",
                "base",
                "fantom",
                "bsc",
                "bsc-testnet",
                "goerli",
                "optimism-goerli",
                "arbitrum-goerli",
                "base-goerli"
              ],
              "default": "ethereum"
            },
            "description": "Blockchain to search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isWalletHolderOfToken": {
                      "type": "boolean",
                      "example": true
                    },
                    "holdingsCount": {
                      "type": "integer",
                      "example": 1
                    },
                    "holdings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contractAddress": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          }
                        },
                        "example": {
                          "contractAddress": "0xed5af388653567af2f388e6224dc7c4b3241c544",
                          "tokenID": 40,
                          "tokenName": "Azuki"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/owned": {
      "get": {
        "summary": "Get all NFTs owned by a wallet address",
        "description": "Returns a list of all NFTs held within a particular wallet address",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "walletAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Wallet address to query"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "sepolia",
                "mumbai",
                "fuji",
                "optimism-sepolia",
                "arbitrum-sepolia",
                "base-sepolia",
                "fantom-testnet",
                "ethereum",
                "polygon",
                "avalanche",
                "optimism",
                "arbitrum",
                "base",
                "fantom",
                "bsc",
                "bsc-testnet",
                "goerli",
                "optimism-goerli",
                "arbitrum-goerli",
                "base-goerli"
              ],
              "default": "ethereum"
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "tokenType",
            "schema": {
              "type": "string",
              "enum": [
                "nft721",
                "nft1155",
                "erc20"
              ],
              "default": "nft721"
            },
            "description": "Define what type of asset you want returned (ERC721, ERC1155, or ERC20 tokens)"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "ASC"
            },
            "description": "Timestamp sort direction for the return results"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "default": 1000
            },
            "description": "Maximum number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "default": 1
            },
            "description": "Page number of the results to return (used to calculate offset)"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nfts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contractAddress": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "contractAddress": "0xed5af388653567af2f388e6224dc7c4b3241c544",
                          "tokenID": 40,
                          "tokenName": "Azuki"
                        },
                        {
                          "contractAddress": "0x23581767a106ae21c074b2276d25e5c3e136a68b",
                          "tokenID": 6504,
                          "tokenName": "Moonbirds"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/created": {
      "get": {
        "summary": "Get all NFTs created by a wallet address",
        "description": "Returns a list of all NFTs created by a particular wallet address",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "walletAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Wallet address to query"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "sepolia",
                "mumbai",
                "fuji",
                "optimism-sepolia",
                "arbitrum-sepolia",
                "base-sepolia",
                "fantom-testnet",
                "ethereum",
                "polygon",
                "avalanche",
                "optimism",
                "arbitrum",
                "base",
                "fantom",
                "bsc",
                "bsc-testnet",
                "goerli",
                "optimism-goerli",
                "arbitrum-goerli",
                "base-goerli"
              ],
              "default": "ethereum"
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "ASC"
            },
            "description": "Timestamp sort direction for the return results"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "default": 1000
            },
            "description": "Maximum number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "default": 1
            },
            "description": "Page number of the results to return (used to calculate offset)"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nfts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contractAddress": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "contractAddress": "0xed5af388653567af2f388e6224dc7c4b3241c544",
                          "tokenID": 40,
                          "tokenName": "Azuki"
                        },
                        {
                          "contractAddress": "0x23581767a106ae21c074b2276d25e5c3e136a68b",
                          "tokenID": 6504,
                          "tokenName": "Moonbirds"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/transactions": {
      "get": {
        "summary": "Get all transactions by a wallet address",
        "description": "Returns a list of all transactions by a particular wallet address",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "walletAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Wallet address to query"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "sepolia",
                "mumbai",
                "fuji",
                "optimism-sepolia",
                "arbitrum-sepolia",
                "base-sepolia",
                "fantom-testnet",
                "ethereum",
                "polygon",
                "avalanche",
                "optimism",
                "arbitrum",
                "base",
                "fantom",
                "bsc",
                "bsc-testnet",
                "goerli",
                "optimism-goerli",
                "arbitrum-goerli",
                "base-goerli"
              ],
              "default": "ethereum"
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "ASC"
            },
            "description": "Timestamp sort direction for the return results"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "default": 1000
            },
            "description": "Maximum number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "default": 1
            },
            "description": "Page number of the results to return (used to calculate offset)"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nft_transactions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "blockNumber": {
                            "type": "string"
                          },
                          "timeStamp": {
                            "type": "string"
                          },
                          "hash": {
                            "type": "string"
                          },
                          "nonce": {
                            "type": "string"
                          },
                          "blockHash": {
                            "type": "string"
                          },
                          "from": {
                            "type": "string"
                          },
                          "contractAddress": {
                            "type": "string"
                          },
                          "to": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          },
                          "tokenSymbol": {
                            "type": "string"
                          },
                          "tokenDecimal": {
                            "type": "string"
                          },
                          "transactionIndex": {
                            "type": "string"
                          },
                          "gas": {
                            "type": "string"
                          },
                          "gasPrice": {
                            "type": "string"
                          },
                          "gasUsed": {
                            "type": "string"
                          },
                          "cumulativeGasUsed": {
                            "type": "string"
                          },
                          "input": {
                            "type": "string"
                          },
                          "confirmations": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "blockNumber": "14554041",
                          "timeStamp": "1649540923",
                          "hash": "0x5b492a277270b4e28f0632b747db44a8650e9092488c9c4d4415ad72a433b382",
                          "nonce": "136",
                          "blockHash": "0x5b5a2faa3e89ef2b58b483086619b30024c0a3ebed7bf744090d278e66e52a08",
                          "from": "0x7d77a304290a422d5c003231ffc1160cb73c60fb",
                          "contractAddress": "0x641f2a0f4dfb439870aada9f0d136d62fd80ad07",
                          "to": "0x4e514d9fcb58503dba5bb2b0f477792c03c8426d",
                          "tokenID": "18",
                          "tokenName": "flymeta",
                          "tokenSymbol": "fm",
                          "tokenDecimal": "0",
                          "transactionIndex": "66",
                          "gas": "265806",
                          "gasPrice": "32084697251",
                          "gasUsed": "199525",
                          "cumulativeGasUsed": "7008966",
                          "input": "deprecated",
                          "confirmations": "264962"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/transactionsByContract": {
      "get": {
        "summary": "Get all NFTs Contract transactions by a wallet address",
        "description": "Produce a list of all NFTs transactions for a specific NFT contract within a particular wallet address",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contractAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "NFT contract address"
          },
          {
            "in": "query",
            "name": "walletAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Wallet address to query"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ],
              "default": "ethereum"
            },
            "description": "Blockchain to search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contract_transactions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "blockNumber": {
                            "type": "string"
                          },
                          "timeStamp": {
                            "type": "string"
                          },
                          "hash": {
                            "type": "string"
                          },
                          "nonce": {
                            "type": "string"
                          },
                          "blockHash": {
                            "type": "string"
                          },
                          "from": {
                            "type": "string"
                          },
                          "contractAddress": {
                            "type": "string"
                          },
                          "to": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          },
                          "tokenSymbol": {
                            "type": "string"
                          },
                          "tokenDecimal": {
                            "type": "string"
                          },
                          "transactionIndex": {
                            "type": "string"
                          },
                          "gas": {
                            "type": "string"
                          },
                          "gasPrice": {
                            "type": "string"
                          },
                          "gasUsed": {
                            "type": "string"
                          },
                          "cumulativeGasUsed": {
                            "type": "string"
                          },
                          "input": {
                            "type": "string"
                          },
                          "confirmations": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "blockNumber": "14554041",
                          "timeStamp": "1649540923",
                          "hash": "0x5b492a277270b4e28f0632b747db44a8650e9092488c9c4d4415ad72a433b382",
                          "nonce": "136",
                          "blockHash": "0x5b5a2faa3e89ef2b58b483086619b30024c0a3ebed7bf744090d278e66e52a08",
                          "from": "0x7d77a304290a422d5c003231ffc1160cb73c60fb",
                          "contractAddress": "0x641f2a0f4dfb439870aada9f0d136d62fd80ad07",
                          "to": "0x4e514d9fcb58503dba5bb2b0f477792c03c8426d",
                          "tokenID": "18",
                          "tokenName": "flymeta",
                          "tokenSymbol": "fm",
                          "tokenDecimal": "0",
                          "transactionIndex": "66",
                          "gas": "265806",
                          "gasPrice": "32084697251",
                          "gasUsed": "199525",
                          "cumulativeGasUsed": "7008966",
                          "input": "deprecated",
                          "confirmations": "264962"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/nftDetails": {
      "get": {
        "summary": "Get details for an NFT",
        "description": "Returns all details for an NFT",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contractAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "NFT contract address"
          },
          {
            "in": "query",
            "name": "tokenId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "NFT Token ID"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "sepolia",
                "mumbai",
                "fuji",
                "optimism-sepolia",
                "arbitrum-sepolia",
                "base-sepolia",
                "fantom-testnet",
                "ethereum",
                "polygon",
                "avalanche",
                "optimism",
                "arbitrum",
                "base",
                "fantom",
                "bsc",
                "bsc-testnet",
                "goerli",
                "optimism-goerli",
                "arbitrum-goerli",
                "base-goerli"
              ],
              "default": "ethereum"
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "populateMetadata",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Fetches metadata for the NFT via the TokenURI"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nft_details": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "symbol": {
                          "type": "string"
                        },
                        "tokenId": {
                          "type": "string"
                        },
                        "owner": {
                          "type": "string"
                        },
                        "tokenURI": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "name": "Azuki",
                        "symbol": "AZUKI",
                        "tokenId": 40,
                        "owner": "0x333e58f8d77a8add1032CfdD781383E934f92d6F",
                        "tokenURI": "https://ikzttp.mypinata.cloud/ipfs/QmQFkLSQysj94s5GvTHPyzTxrawwtjgiiYS2TBLgrvw8CW/40"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/lastFloorPriceForSlug": {
      "get": {
        "summary": "Get last floor price for slug",
        "description": "Returns the most recent floor price for an NFT project slug",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "boredapeyachtclub"
            },
            "required": true,
            "description": "NFT project slug"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "floorPrices": {
                      "type": "object",
                      "properties": {
                        "source": {
                          "type": "string"
                        },
                        "eventType": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string"
                        },
                        "slug": {
                          "type": "string"
                        },
                        "chain": {
                          "type": "string"
                        },
                        "floorAsk": {
                          "type": "number"
                        },
                        "previousFloorAsk": {
                          "type": "number"
                        },
                        "contractId": {
                          "type": "string"
                        },
                        "timestamp": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "source": "X2Y2",
                        "eventType": "floorPriceChangeEvent",
                        "kind": "cancel",
                        "slug": "boredapeyachtclub",
                        "chain": "ethereum",
                        "floorAsk": 79,
                        "previousFloorAsk": 78.8,
                        "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                        "timestamp": "2022-09-26T07:33:26.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/lastFloorPriceForContractAddress": {
      "get": {
        "summary": "Get last floor price for contract address",
        "description": "Returns the most recent floor price for an NFT",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contractAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "NFT contract address"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "floorPrices": {
                      "type": "object",
                      "properties": {
                        "source": {
                          "type": "string"
                        },
                        "eventType": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string"
                        },
                        "slug": {
                          "type": "string"
                        },
                        "chain": {
                          "type": "string"
                        },
                        "floorAsk": {
                          "type": "number"
                        },
                        "previousFloorAsk": {
                          "type": "number"
                        },
                        "contractId": {
                          "type": "string"
                        },
                        "timestamp": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "source": "X2Y2",
                        "eventType": "floorPriceChangeEvent",
                        "kind": "cancel",
                        "slug": "boredapeyachtclub",
                        "chain": "ethereum",
                        "floorAsk": 79,
                        "previousFloorAsk": 78.8,
                        "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                        "timestamp": "2022-09-26T07:33:26.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/floorPricesForSlug": {
      "get": {
        "summary": "Get floor prices for slug",
        "description": "Returns all floor price history for an NFT project slug",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "boredapeyachtclub"
            },
            "required": true,
            "description": "NFT project slug"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string"
            },
            "description": "Starting timestamp for results"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string"
            },
            "description": "Ending timestamp for results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "floorPrices": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "source": {
                                "type": "string"
                              },
                              "eventType": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string"
                              },
                              "slug": {
                                "type": "string"
                              },
                              "chain": {
                                "type": "string"
                              },
                              "floorAsk": {
                                "type": "number"
                              },
                              "previousFloorAsk": {
                                "type": "number"
                              },
                              "contractId": {
                                "type": "string"
                              },
                              "timestamp": {
                                "type": "string"
                              }
                            },
                            "example": {
                              "source": "X2Y2",
                              "eventType": "floorPriceChangeEvent",
                              "kind": "cancel",
                              "slug": "boredapeyachtclub",
                              "chain": "ethereum",
                              "floorAsk": 79,
                              "previousFloorAsk": 78.8,
                              "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                              "timestamp": "2022-09-26T07:33:26.000Z"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/floorPricesForContractAddress": {
      "get": {
        "summary": "Get floor prices for contract address",
        "description": "Returns all floor price history for an NFT project",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contractAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "NFT contract address"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string"
            },
            "description": "Starting timestamp for results"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string"
            },
            "description": "Ending timestamp for results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "floorPrices": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "source": {
                                "type": "string"
                              },
                              "eventType": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string"
                              },
                              "slug": {
                                "type": "string"
                              },
                              "chain": {
                                "type": "string"
                              },
                              "floorAsk": {
                                "type": "number"
                              },
                              "previousFloorAsk": {
                                "type": "number"
                              },
                              "contractId": {
                                "type": "string"
                              },
                              "timestamp": {
                                "type": "string"
                              }
                            },
                            "example": {
                              "source": "X2Y2",
                              "eventType": "floorPriceChangeEvent",
                              "kind": "cancel",
                              "slug": "boredapeyachtclub",
                              "chain": "ethereum",
                              "floorAsk": 79,
                              "previousFloorAsk": 78.8,
                              "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                              "timestamp": "2022-09-26T07:33:26.000Z"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/historicalStatsForSlug": {
      "get": {
        "summary": "Get historical stats for slug",
        "description": "Returns historical statistics for an NFT project slug",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "azuki"
            },
            "required": true,
            "description": "NFT project slug"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string"
            },
            "description": "Starting timestamp for results"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string"
            },
            "description": "Ending timestamp for results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "historicalStats": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "eventType": {
                                "type": "string"
                              },
                              "slug": {
                                "type": "string"
                              },
                              "contractId": {
                                "type": "string"
                              },
                              "chain": {
                                "type": "string"
                              },
                              "floorSale": {
                                "type": "number"
                              },
                              "salesCount": {
                                "type": "integer"
                              },
                              "rank": {
                                "type": "integer"
                              },
                              "volume": {
                                "type": "number"
                              },
                              "timestamp": {
                                "type": "string"
                              }
                            },
                            "example": {
                              "eventType": "dailyHistoryEvent",
                              "slug": "boredapeyachtclub",
                              "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                              "chain": "ethereum",
                              "floorSale": 71,
                              "salesCount": 7,
                              "rank": 7,
                              "volume": 575.1,
                              "timestamp": "2022-08-01T04:00:00.000Z"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/historicalStatsForContractAddress": {
      "get": {
        "summary": "Get historical stats for contract address",
        "description": "Returns historical statistics for an NFT project",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contractAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "NFT contract address"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string"
            },
            "description": "Starting timestamp for results"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string"
            },
            "description": "Ending timestamp for results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "historicalStats": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "eventType": {
                                "type": "string"
                              },
                              "slug": {
                                "type": "string"
                              },
                              "contractId": {
                                "type": "string"
                              },
                              "chain": {
                                "type": "string"
                              },
                              "floorSale": {
                                "type": "number"
                              },
                              "salesCount": {
                                "type": "integer"
                              },
                              "rank": {
                                "type": "integer"
                              },
                              "volume": {
                                "type": "number"
                              },
                              "timestamp": {
                                "type": "string"
                              }
                            },
                            "example": {
                              "eventType": "dailyHistoryEvent",
                              "slug": "boredapeyachtclub",
                              "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                              "chain": "ethereum",
                              "floorSale": 71,
                              "salesCount": 7,
                              "rank": 7,
                              "volume": 575.1,
                              "timestamp": "2022-08-01T04:00:00.000Z"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/salesEventsForSlug": {
      "get": {
        "summary": "Get sales events for slug",
        "description": "Returns all sales events for a particular NFT project slug",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "boredapeyachtclub"
            },
            "required": true,
            "description": "NFT project slug"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string"
            },
            "description": "Starting timestamp for results"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string"
            },
            "description": "Ending timestamp for results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sales": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "source": {
                                "type": "string"
                              },
                              "eventType": {
                                "type": "string"
                              },
                              "orderSide": {
                                "type": "string"
                              },
                              "slug": {
                                "type": "string"
                              },
                              "chain": {
                                "type": "string"
                              },
                              "sale": {
                                "type": "number"
                              },
                              "saleUsd": {
                                "type": "number"
                              },
                              "contractId": {
                                "type": "string"
                              },
                              "tokenId": {
                                "type": "string"
                              },
                              "from": {
                                "type": "string"
                              },
                              "to": {
                                "type": "string"
                              },
                              "block": {
                                "type": "string"
                              },
                              "txHash": {
                                "type": "string"
                              },
                              "timestamp": {
                                "type": "string"
                              }
                            },
                            "example": {
                              "source": "opensea.io",
                              "eventType": "salesEvent",
                              "orderSide": "ask",
                              "slug": "boredapeyachtclub",
                              "chain": "ethereum",
                              "sale": 769.9,
                              "saleUsd": 1174405.54931,
                              "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                              "tokenId": "6588",
                              "from": "0x29e2ffcbece02e9b9d0470afa7a7c0b9c81923ff",
                              "to": "0xec7e5a49ee8e95a89a1a881bbf1aae2ec854d790",
                              "block": "15448013",
                              "txHash": "0xb2b2276d9073807bf64527200a74aa49581394b4f9cdb99d403578167d8fb559",
                              "timestamp": "2022-08-31T21:41:52.000Z"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/salesEventsForContractAddress": {
      "get": {
        "summary": "Get sales events for contract address",
        "description": "Returns all sales events for a particular NFT project slug",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contractAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "NFT contract address"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string"
            },
            "description": "Starting timestamp for results"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string"
            },
            "description": "Ending timestamp for results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sales": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "source": {
                                "type": "string"
                              },
                              "eventType": {
                                "type": "string"
                              },
                              "orderSide": {
                                "type": "string"
                              },
                              "slug": {
                                "type": "string"
                              },
                              "chain": {
                                "type": "string"
                              },
                              "sale": {
                                "type": "number"
                              },
                              "saleUsd": {
                                "type": "number"
                              },
                              "contractId": {
                                "type": "string"
                              },
                              "tokenId": {
                                "type": "string"
                              },
                              "from": {
                                "type": "string"
                              },
                              "to": {
                                "type": "string"
                              },
                              "block": {
                                "type": "string"
                              },
                              "txHash": {
                                "type": "string"
                              },
                              "timestamp": {
                                "type": "string"
                              }
                            },
                            "example": {
                              "source": "opensea.io",
                              "eventType": "salesEvent",
                              "orderSide": "ask",
                              "slug": "boredapeyachtclub",
                              "chain": "ethereum",
                              "sale": 769.9,
                              "saleUsd": 1174405.54931,
                              "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                              "tokenId": "6588",
                              "from": "0x29e2ffcbece02e9b9d0470afa7a7c0b9c81923ff",
                              "to": "0xec7e5a49ee8e95a89a1a881bbf1aae2ec854d790",
                              "block": "15448013",
                              "txHash": "0xb2b2276d9073807bf64527200a74aa49581394b4f9cdb99d403578167d8fb559",
                              "timestamp": "2022-08-31T21:41:52.000Z"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/transferEventsForSlug": {
      "get": {
        "summary": "Get transfer events for slug",
        "description": "Returns all transfer events for a particular NFT project slug",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "boredapeyachtclub"
            },
            "required": true,
            "description": "NFT project slug"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string"
            },
            "description": "Starting timestamp for results"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string"
            },
            "description": "Ending timestamp for results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transfers": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "amount": {
                                    "type": "integer"
                                  },
                                  "block": {
                                    "type": "string"
                                  },
                                  "chain": {
                                    "type": "string"
                                  },
                                  "contractId": {
                                    "type": "string"
                                  },
                                  "slug": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "tokenId": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  }
                                },
                                "example": {
                                  "amount": 1,
                                  "block": "15451208",
                                  "chain": "ethereum",
                                  "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                                  "slug": "boredapeyachtclub",
                                  "from": "0x3b968d2d299b895a5fcf3bba7a64ad0f566e6f88",
                                  "to": "0x70b97a0da65c15dfb0ffa02aee6fa36e507c2762",
                                  "tokenId": "7397",
                                  "txHash": "0xf41bcba23e8f6421ccae857be1cc96b06c6ab2fdb10dd4e07ab72882078345ec",
                                  "id": "dc2224522229e2ffcbece02e9b9d0470afa7a7c0b9c81923ff",
                                  "timestamp": "2022-09-01T06:05:10.000Z"
                                }
                              }
                            ]
                          }
                        },
                        "page": {
                          "type": "number",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 50
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalResults": {
                          "type": "integer",
                          "example": 31
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/transferEventsForContractAddress": {
      "get": {
        "summary": "Get transfer events for contract address",
        "description": "Returns all transfer events for a particular NFT project slug",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contractAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "NFT contract address"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string"
            },
            "description": "Starting timestamp for results"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string"
            },
            "description": "Ending timestamp for results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transfers": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "amount": {
                                    "type": "integer"
                                  },
                                  "block": {
                                    "type": "string"
                                  },
                                  "chain": {
                                    "type": "string"
                                  },
                                  "contractId": {
                                    "type": "string"
                                  },
                                  "slug": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "tokenId": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  }
                                },
                                "example": {
                                  "amount": 1,
                                  "block": "15451208",
                                  "chain": "ethereum",
                                  "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                                  "slug": "boredapeyachtclub",
                                  "from": "0x3b968d2d299b895a5fcf3bba7a64ad0f566e6f88",
                                  "to": "0x70b97a0da65c15dfb0ffa02aee6fa36e507c2762",
                                  "tokenId": "7397",
                                  "txHash": "0xf41bcba23e8f6421ccae857be1cc96b06c6ab2fdb10dd4e07ab72882078345ec",
                                  "id": "dc2224522229e2ffcbece02e9b9d0470afa7a7c0b9c81923ff",
                                  "timestamp": "2022-09-01T06:05:10.000Z"
                                }
                              }
                            ]
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 50
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalResults": {
                          "type": "integer",
                          "example": 31
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/ownershipForSlug": {
      "get": {
        "summary": "Get ownership data for slug",
        "description": "Returns all wallets that own a particular NFT project slug",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "boredapeyachtclub"
            },
            "required": true,
            "description": "NFT project slug"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transfers": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "type": "string"
                                  },
                                  "chain": {
                                    "type": "string"
                                  },
                                  "contractId": {
                                    "type": "string"
                                  },
                                  "slug": {
                                    "type": "string"
                                  },
                                  "tokenCount": {
                                    "type": "integer"
                                  },
                                  "floorAskPrice": {
                                    "type": "number"
                                  },
                                  "onSaleCount": {
                                    "type": "integer"
                                  },
                                  "topBidValue": {
                                    "type": "number"
                                  },
                                  "totalBidValue": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "lastUpdated": {
                                    "type": "string"
                                  }
                                },
                                "example": {
                                  "address": "0xdbfd76af2157dc15ee4e57f3f942bb45ba84af24",
                                  "chain": "ethereum",
                                  "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                                  "slug": "boredapeyachtclub",
                                  "tokenCount": 280,
                                  "floorAskPrice": null,
                                  "onSaleCount": 0,
                                  "topBidValue": 1.146,
                                  "totalBidValue": 320.88,
                                  "id": "dc2224522229e2ffcbece02e9b9d0470afa7a7c0b9c81923ff",
                                  "lastUpdated": "2022-09-27T19:08:11.675Z"
                                }
                              }
                            ]
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 50
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalResults": {
                          "type": "integer",
                          "example": 31
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/ownershipForContractAddress": {
      "get": {
        "summary": "Get ownership data for contract address",
        "description": "Returns all wallets that owna particular NFT project slug",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contractAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "NFT contract address"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transfers": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "type": "string"
                                  },
                                  "chain": {
                                    "type": "string"
                                  },
                                  "contractId": {
                                    "type": "string"
                                  },
                                  "slug": {
                                    "type": "string"
                                  },
                                  "tokenCount": {
                                    "type": "integer"
                                  },
                                  "floorAskPrice": {
                                    "type": "number"
                                  },
                                  "onSaleCount": {
                                    "type": "integer"
                                  },
                                  "topBidValue": {
                                    "type": "number"
                                  },
                                  "totalBidValue": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "lastUpdated": {
                                    "type": "string"
                                  }
                                },
                                "example": {
                                  "address": "0xdbfd76af2157dc15ee4e57f3f942bb45ba84af24",
                                  "chain": "ethereum",
                                  "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                                  "slug": "boredapeyachtclub",
                                  "tokenCount": 280,
                                  "floorAskPrice": null,
                                  "onSaleCount": 0,
                                  "topBidValue": 1.146,
                                  "totalBidValue": 320.88,
                                  "id": "dc2224522229e2ffcbece02e9b9d0470afa7a7c0b9c81923ff",
                                  "lastUpdated": "2022-09-27T19:08:11.675Z"
                                }
                              }
                            ]
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 50
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalResults": {
                          "type": "integer",
                          "example": 31
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/collections/all": {
      "get": {
        "summary": "Get all indexed collections",
        "description": "Returns all collections indexed by Verbwire",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string",
              "enum": [
                "rank",
                "volume"
              ],
              "default": "rank"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sortInterval",
            "schema": {
              "type": "string",
              "enum": [
                "1day",
                "7day",
                "30day",
                "allTime"
              ],
              "default": "allTime"
            },
            "description": "Interval to sort by"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "ASC"
            },
            "description": "Timestamp sort direction for the return results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "collections": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "chain": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "discordUrl": {
                                    "type": "string"
                                  },
                                  "externalUrl": {
                                    "type": "string"
                                  },
                                  "floorSale": {
                                    "type": "object",
                                    "properties": {
                                      "1day": {
                                        "type": "number"
                                      },
                                      "7day": {
                                        "type": "number"
                                      },
                                      "30day": {
                                        "type": "number"
                                      }
                                    }
                                  },
                                  "image": {
                                    "type": "string"
                                  },
                                  "onSaleCount": {
                                    "type": "integer"
                                  },
                                  "primaryContract": {
                                    "type": "string"
                                  },
                                  "rank": {
                                    "type": "object",
                                    "properties": {
                                      "1day": {
                                        "type": "integer"
                                      },
                                      "7day": {
                                        "type": "integer"
                                      },
                                      "30day": {
                                        "type": "integer"
                                      },
                                      "allTime": {
                                        "type": "integer"
                                      }
                                    }
                                  },
                                  "royalties": {
                                    "type": "object",
                                    "properties": {
                                      "bps": {
                                        "type": "number"
                                      },
                                      "recipient": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "slug": {
                                    "type": "string"
                                  },
                                  "tokenCount": {
                                    "type": "integer"
                                  },
                                  "twitterUsername": {
                                    "type": "string"
                                  },
                                  "volume": {
                                    "type": "object",
                                    "properties": {
                                      "1day": {
                                        "type": "number"
                                      },
                                      "7day": {
                                        "type": "number"
                                      },
                                      "30day": {
                                        "type": "number"
                                      },
                                      "allTime": {
                                        "type": "number"
                                      }
                                    }
                                  },
                                  "id": {
                                    "type": "string"
                                  }
                                },
                                "example": {
                                  "chain": "ethereum",
                                  "description": "ethereum",
                                  "contractId": "The Bored Ape Yacht Club is a collection of 10,000 unique Bored Ape NFTs— unique digital collectibles living on the Ethereum blockchain...",
                                  "discordUrl": "https://discord.gg/3P5K3dzgdB",
                                  "externalUrl": "http://www.boredapeyachtclub.com/",
                                  "floorSale": {
                                    "1day": 65,
                                    "7day": 67.69,
                                    "30day": 68.681
                                  },
                                  "image": "https://i.seadn.io/gae/Ju9CkWtV-1Okvf45wo8UctR-M9He2PjILP0oOvxE89AyiPPGtrR3gysu1Zgy0hjd2xKIgjJJtWIc0ybj4Vd7wv8t3pxDGHoJBzDB?w=500&auto=format",
                                  "onSaleCount": 764,
                                  "primaryContract": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                                  "rank": {
                                    "1day": 2,
                                    "7day": 2,
                                    "30day": 1,
                                    "allTime": 3
                                  },
                                  "royalties": {
                                    "bps": 250,
                                    "recipient": "0xa858ddc0445d8131dac4d1de01f834ffcba52ef1"
                                  },
                                  "slug": "boredapeyachtclub",
                                  "tokenCount": 10000,
                                  "twitterUsername": "BoredApeYC",
                                  "volume": {
                                    "1day": 723.17,
                                    "7day": 3657.87519,
                                    "30day": 23609.35266,
                                    "allTime": 793507.11896
                                  },
                                  "id": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d"
                                }
                              }
                            ]
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 50
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalResults": {
                          "type": "integer",
                          "example": 31
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/collections/search": {
      "get": {
        "summary": "Search all indexed collections",
        "description": "Searches all collections indexed by Verbwire for a given string",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "searchString",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Search value"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string",
              "enum": [
                "rank",
                "volume"
              ],
              "default": "rank"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sortInterval",
            "schema": {
              "type": "string",
              "enum": [
                "1day",
                "7day",
                "30day",
                "allTime"
              ],
              "default": "allTime"
            },
            "description": "Interval to sort by"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "ASC"
            },
            "description": "Timestamp sort direction for the return results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "collections": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "chain": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "discordUrl": {
                                    "type": "string"
                                  },
                                  "externalUrl": {
                                    "type": "string"
                                  },
                                  "floorSale": {
                                    "type": "object",
                                    "properties": {
                                      "1day": {
                                        "type": "number"
                                      },
                                      "7day": {
                                        "type": "number"
                                      },
                                      "30day": {
                                        "type": "number"
                                      }
                                    }
                                  },
                                  "image": {
                                    "type": "string"
                                  },
                                  "onSaleCount": {
                                    "type": "integer"
                                  },
                                  "primaryContract": {
                                    "type": "string"
                                  },
                                  "rank": {
                                    "type": "object",
                                    "properties": {
                                      "1day": {
                                        "type": "integer"
                                      },
                                      "7day": {
                                        "type": "integer"
                                      },
                                      "30day": {
                                        "type": "integer"
                                      },
                                      "allTime": {
                                        "type": "integer"
                                      }
                                    }
                                  },
                                  "royalties": {
                                    "type": "object",
                                    "properties": {
                                      "bps": {
                                        "type": "number"
                                      },
                                      "recipient": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "slug": {
                                    "type": "string"
                                  },
                                  "tokenCount": {
                                    "type": "integer"
                                  },
                                  "twitterUsername": {
                                    "type": "string"
                                  },
                                  "volume": {
                                    "type": "object",
                                    "properties": {
                                      "1day": {
                                        "type": "number"
                                      },
                                      "7day": {
                                        "type": "number"
                                      },
                                      "30day": {
                                        "type": "number"
                                      },
                                      "allTime": {
                                        "type": "number"
                                      }
                                    }
                                  },
                                  "id": {
                                    "type": "string"
                                  }
                                },
                                "example": {
                                  "chain": "ethereum",
                                  "description": "ethereum",
                                  "contractId": "The Bored Ape Yacht Club is a collection of 10,000 unique Bored Ape NFTs— unique digital collectibles living on the Ethereum blockchain...",
                                  "discordUrl": "https://discord.gg/3P5K3dzgdB",
                                  "externalUrl": "http://www.boredapeyachtclub.com/",
                                  "floorSale": {
                                    "1day": 65,
                                    "7day": 67.69,
                                    "30day": 68.681
                                  },
                                  "image": "https://i.seadn.io/gae/Ju9CkWtV-1Okvf45wo8UctR-M9He2PjILP0oOvxE89AyiPPGtrR3gysu1Zgy0hjd2xKIgjJJtWIc0ybj4Vd7wv8t3pxDGHoJBzDB?w=500&auto=format",
                                  "onSaleCount": 764,
                                  "primaryContract": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                                  "rank": {
                                    "1day": 2,
                                    "7day": 2,
                                    "30day": 1,
                                    "allTime": 3
                                  },
                                  "royalties": {
                                    "bps": 250,
                                    "recipient": "0xa858ddc0445d8131dac4d1de01f834ffcba52ef1"
                                  },
                                  "slug": "boredapeyachtclub",
                                  "tokenCount": 10000,
                                  "twitterUsername": "BoredApeYC",
                                  "volume": {
                                    "1day": 723.17,
                                    "7day": 3657.87519,
                                    "30day": 23609.35266,
                                    "allTime": 793507.11896
                                  },
                                  "id": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d"
                                }
                              }
                            ]
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 50
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalResults": {
                          "type": "integer",
                          "example": 31
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/attributesForSlug": {
      "get": {
        "summary": "Get attributes for slug",
        "description": "Returns all metadata attributes for a particular NFT project slug",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "boredapeyachtclub"
            },
            "required": true,
            "description": "NFT project slug"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string",
              "enum": [
                "key",
                "value",
                "count"
              ],
              "default": "key"
            }
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "contractId": {
                                    "type": "string"
                                  },
                                  "slug": {
                                    "type": "string"
                                  },
                                  "key": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "count": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  }
                                },
                                "example": {
                                  "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                                  "slug": "boredapeyachtclub",
                                  "key": "Background",
                                  "value": "Orange",
                                  "count": 1273,
                                  "id": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d:ethereum:Background->Orange"
                                }
                              }
                            ]
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 500
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalResults": {
                          "type": "integer",
                          "example": 168
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/attributesForContractAddress": {
      "get": {
        "summary": "Get attributes for contract address",
        "description": "Returns all metadata attributes for an NFT contract address",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contractAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "NFT contract address"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string",
              "enum": [
                "key",
                "value",
                "count"
              ],
              "default": "key"
            }
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "contractId": {
                                    "type": "string"
                                  },
                                  "slug": {
                                    "type": "string"
                                  },
                                  "key": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "count": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  }
                                },
                                "example": {
                                  "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                                  "slug": "boredapeyachtclub",
                                  "key": "Background",
                                  "value": "Orange",
                                  "count": 1273,
                                  "id": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d:ethereum:Background->Orange"
                                }
                              }
                            ]
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 500
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalResults": {
                          "type": "integer",
                          "example": 168
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/attributesWithTokensForSlug": {
      "get": {
        "summary": "Get attributes (with tokens) for slug",
        "description": "Returns all metadata attributes and corresponding token IDs for a particular NFT project slug",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "boredapeyachtclub"
            },
            "required": true,
            "description": "NFT project slug"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string",
              "enum": [
                "key",
                "value",
                "count"
              ],
              "default": "key"
            }
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "contractId": {
                                    "type": "string"
                                  },
                                  "slug": {
                                    "type": "string"
                                  },
                                  "key": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "count": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "tokens": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "example": {
                                  "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                                  "slug": "boredapeyachtclub",
                                  "key": "Mouth",
                                  "value": "Bored Unshaven Pizza",
                                  "count": 1273,
                                  "id": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d:ethereum:Background->Orange",
                                  "tokens": [
                                    "208",
                                    "1459",
                                    "2402",
                                    "2550",
                                    "2587",
                                    "2794",
                                    "3046",
                                    "3722",
                                    "3953",
                                    "4448",
                                    "4922",
                                    "5353",
                                    "5491",
                                    "5615",
                                    "5800",
                                    "6445",
                                    "7253",
                                    "7265",
                                    "7653",
                                    "7678",
                                    "8921",
                                    "8976",
                                    "9455",
                                    "9542",
                                    "9606",
                                    "9796"
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 500
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalResults": {
                          "type": "integer",
                          "example": 168
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/attributesWithTokensForContractAddress": {
      "get": {
        "summary": "Get attributes (with tokens) for contract address",
        "description": "Returns all metadata attributes and corresponding token IDs for an NFT contract address",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contractAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "NFT contract address"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string",
              "enum": [
                "key",
                "value",
                "count"
              ],
              "default": "key"
            }
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "contractId": {
                                    "type": "string"
                                  },
                                  "slug": {
                                    "type": "string"
                                  },
                                  "key": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "count": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "tokens": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "example": {
                                  "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                                  "slug": "boredapeyachtclub",
                                  "key": "Mouth",
                                  "value": "Bored Unshaven Pizza",
                                  "count": 1273,
                                  "id": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d:ethereum:Background->Orange",
                                  "tokens": [
                                    "208",
                                    "1459",
                                    "2402",
                                    "2550",
                                    "2587",
                                    "2794",
                                    "3046",
                                    "3722",
                                    "3953",
                                    "4448",
                                    "4922",
                                    "5353",
                                    "5491",
                                    "5615",
                                    "5800",
                                    "6445",
                                    "7253",
                                    "7265",
                                    "7653",
                                    "7678",
                                    "8921",
                                    "8976",
                                    "9455",
                                    "9542",
                                    "9606",
                                    "9796"
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 500
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalResults": {
                          "type": "integer",
                          "example": 168
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/searchAttributesInSlug": {
      "get": {
        "summary": "Search attributes in slug",
        "description": "Returns all metadata attributes for a particular NFT project slug",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "searchString",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Expression to search in NFT attributes"
          },
          {
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "NFT project slug"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string",
              "enum": [
                "key",
                "value",
                "count"
              ],
              "default": "key"
            }
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          },
          {
            "in": "query",
            "name": "includeTokens",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include the corresponding token IDs in search results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "contractId": {
                                    "type": "string"
                                  },
                                  "slug": {
                                    "type": "string"
                                  },
                                  "key": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "count": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  }
                                },
                                "example": {
                                  "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                                  "slug": "boredapeyachtclub",
                                  "key": "Background",
                                  "value": "Orange",
                                  "count": 1273,
                                  "id": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d:ethereum:Background->Orange"
                                }
                              }
                            ]
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 500
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalResults": {
                          "type": "integer",
                          "example": 168
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/data/searchAttributesInContractAddress": {
      "get": {
        "summary": "Search attributes in contract address",
        "description": "Returns all metadata attributes for an NFT contract address",
        "tags": [
          "Data"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "searchString",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Expression to search in NFT attributes"
          },
          {
            "in": "query",
            "name": "contractAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "NFT contract address"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            },
            "description": "Blockchain to search"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 1000,
              "default": 25
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1
            },
            "description": "Used to return the next set of items"
          },
          {
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string",
              "enum": [
                "key",
                "value",
                "count"
              ],
              "default": "key"
            }
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "DESC"
            },
            "description": "Timestamp sort direction for the return results"
          },
          {
            "in": "query",
            "name": "includeTokens",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include the corresponding token IDs in search results"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "contractId": {
                                    "type": "string"
                                  },
                                  "slug": {
                                    "type": "string"
                                  },
                                  "key": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "count": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  }
                                },
                                "example": {
                                  "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                                  "slug": "boredapeyachtclub",
                                  "key": "Background",
                                  "value": "Orange",
                                  "count": 1273,
                                  "id": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d:ethereum:Background->Orange"
                                }
                              }
                            ]
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 500
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalResults": {
                          "type": "integer",
                          "example": 168
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/deploy/deployContract": {
      "post": {
        "summary": "Deploy a Smart Contract",
        "description": "Deploy your smart contract in seconds. Supports multiple types of contracts - (i) A standard ERC721 contract (ii) An ERC1155 contract (iii) An ERC721A contract (iv) An Omnichain ERC721 contract (v) An ERC20 contract (vi) A Commerce contract. A commerce contract lets you receive payments seamlessly on chain. An Omni chain contract lets you move your deployed NFTs across multiple blockchains seamlessly",
        "tags": [
          "Deploy"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "chain"
                ],
                "properties": {
                  "contractName": {
                    "type": "string",
                    "description": "Name of your contract"
                  },
                  "contractSymbol": {
                    "type": "string",
                    "description": "Your contract symbol"
                  },
                  "recipientAddress": {
                    "type": "string",
                    "description": "Wallet address of contract owner - optional"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which NFT contract will be deployed"
                  },
                  "contractType": {
                    "type": "string",
                    "enum": [
                      "nft721",
                      "nft1155",
                      "onft721",
                      "nft721A",
                      "erc20",
                      "commerce"
                    ],
                    "description": "Type of contract - optional"
                  },
                  "contractCategory": {
                    "type": "string",
                    "enum": [
                      "simple",
                      "advanced"
                    ],
                    "description": "Your contract category. Defaults to simple"
                  },
                  "isCollectionContract": {
                    "type": "string",
                    "enum": [
                      false,
                      true
                    ],
                    "description": "True/False"
                  }
                },
                "example": {
                  "contractName": "TestContractName",
                  "contractSymbol": "TestSymbol",
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia",
                  "contractType": "nft721",
                  "contractCategory": "simple",
                  "isCollectionContract": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/mint/quickMintFromFile": {
      "post": {
        "summary": "Quick mint Omnichain NFT from image",
        "description": "Mint an Omnichain NFT directly from your specified image file in seconds",
        "tags": [
          "Mint"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "filePath",
                  "name",
                  "description",
                  "chain"
                ],
                "properties": {
                  "filePath": {
                    "type": "string",
                    "format": "binary",
                    "description": "Input file for your NFT mint. It could be an image file, or any file."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of your NFT"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of your NFT"
                  },
                  "recipientAddress": {
                    "type": "string",
                    "description": "Wallet addres that NFT will be minted to - optional. If empty, the NFT will be in the default Verbwire wallet."
                  },
                  "allowPlatformToOperateToken": {
                    "type": "string",
                    "enum": [
                      true,
                      false
                    ]
                  },
                  "data": {
                    "type": "string",
                    "description": "Data to be minted in your NFT. If you want attributes viewable on Opensea please see opensea standards [here](https://docs.opensea.io/docs/metadata-standards)."
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "ethereum",
                      "sepolia",
                      "polygon",
                      "mumbai",
                      "avalanche",
                      "fuji",
                      "optimism",
                      "optimism-sepolia",
                      "arbitrum",
                      "arbitrum-sepolia",
                      "base",
                      "base-sepolia",
                      "fantom",
                      "fantom-testnet",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which NFT will be minted"
                  }
                },
                "example": {
                  "name": "SampleNFTName",
                  "description": "Sample Description"
                },
                "default": {
                  "allowPlatformToOperateToken": true,
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/mint/quickMintFromMetadataUrl": {
      "post": {
        "summary": "Quick mint from Metadata URL",
        "description": "Mint an Omnichain NFT directly from a provided metadata file URL",
        "tags": [
          "Mint"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "metadataUrl",
                  "chain"
                ],
                "properties": {
                  "metadataUrl": {
                    "type": "string",
                    "description": "Url of your metadata."
                  },
                  "recipientAddress": {
                    "type": "string",
                    "description": "Wallet addres that NFT will be minted to - optional. If empty, the NFT will be in the default Verbwire wallet."
                  },
                  "allowPlatformToOperateToken": {
                    "type": "string",
                    "enum": [
                      true,
                      false
                    ]
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which NFT will be minted"
                  }
                },
                "example": {
                  "metadataUrl": "https://ipfs.io/ipfs/bafkreigjkcafrutdcbicyr3new6aoowgbscf6wgqyty45ckd3xur7ymldm",
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "allowPlatformToOperateToken": true,
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/mint/quickMintFromMetadata": {
      "post": {
        "summary": "Quick mint Omnichain NFT from Metadata",
        "description": "Mint an Omnichain NFT directly with your supplied data in seconds",
        "tags": [
          "Mint"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "imageUrl": {
                    "type": "string",
                    "description": "imageUrl of image to be attached to your NFT - optional. If left empty the default Verbwire image will be used."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of your NFT - optional"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of your NFT - optional"
                  },
                  "recipientAddress": {
                    "type": "string",
                    "description": "Wallet address of NFT owner - optional. If left empty the default Verbwire wallet will be used."
                  },
                  "data": {
                    "type": "string",
                    "description": "Data to be minted in your NFT. If you want attributes viewable on Opensea please see opensea standards [here](https://docs.opensea.io/docs/metadata-standards)."
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which NFT will be minted"
                  }
                },
                "example": {
                  "name": "SampleNFTName",
                  "description": "Sample Description"
                },
                "default": {
                  "allowPlatformToOperateToken": true,
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/mint/mintFromFile": {
      "post": {
        "summary": "Mint NFT from image",
        "description": "Mint an NFT directly from your specified image file in seconds, using your own contract. Suppports multiple contract types.",
        "tags": [
          "Mint"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "filePath",
                  "name",
                  "description",
                  "chain",
                  "contractAddress"
                ],
                "properties": {
                  "filePath": {
                    "type": "string",
                    "format": "binary",
                    "description": "Input file for your NFT mint. It could be an image file, or any file."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of your NFT"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of your NFT"
                  },
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "recipientAddress": {
                    "type": "string",
                    "description": "Wallet address of NFT owner - optional. If left empty the default Verbwire wallet will be used."
                  },
                  "allowPlatformToOperateToken": {
                    "type": "string",
                    "enum": [
                      true,
                      false
                    ]
                  },
                  "data": {
                    "type": "string",
                    "description": "Data to be minted in your NFT. If you want attributes viewable on Opensea please see opensea standards [here](https://docs.opensea.io/docs/metadata-standards)."
                  },
                  "quantity": {
                    "type": "string",
                    "description": "Quantity of tokens to be minted - optional"
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "Token ID of NFTs minted. Applicable to ERC1155 tokens only."
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which NFT will be minted"
                  }
                },
                "example": {
                  "name": "SampleNFTName",
                  "description": "Sample Description"
                },
                "default": {
                  "allowPlatformToOperateToken": true,
                  "chain": "sepolia",
                  "quantity": 1
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/mint/mintFromMetadataUrl": {
      "post": {
        "summary": "Mint NFT from Metadata URL",
        "description": "Mint an NFT directly from a provided metadata file URL, using your own contract. Supports multiple contract types.",
        "tags": [
          "Mint"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "metadataUrl",
                  "chain",
                  "contractAddress"
                ],
                "properties": {
                  "metadataUrl": {
                    "type": "string",
                    "description": "Url of your metadata"
                  },
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "recipientAddress": {
                    "type": "string",
                    "description": "Wallet addres that NFT will be minted to - optional. If empty, the NFT will be in the default Verbwire wallet."
                  },
                  "quantity": {
                    "type": "string",
                    "description": "Quantity of tokens to be minted - optional"
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "Token ID of NFTs minted. Applicable to ERC1155 tokens only."
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which NFT will be minted"
                  },
                  "allowPlatformToOperateToken": {
                    "type": "string",
                    "enum": [
                      true,
                      false
                    ]
                  }
                },
                "example": {
                  "metadataUrl": "https://ipfs.io/ipfs/bafkreigjkcafrutdcbicyr3new6aoowgbscf6wgqyty45ckd3xur7ymldm",
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "allowPlatformToOperateToken": true,
                  "chain": "sepolia",
                  "quantity": 1
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/mint/mintFromMetadata": {
      "post": {
        "summary": "Mint NFT from metadata",
        "description": "Mint an NFT directly with your supplied data in seconds, using your own contract. Supports multiple contract types.",
        "tags": [
          "Mint"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "contractAddress",
                  "chain"
                ],
                "properties": {
                  "imageUrl": {
                    "type": "string",
                    "description": "imageUrl of image to be attached to your NFT - optional. If left empty the default Verbwire image will be used."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of your NFT - optional"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of your NFT - optional"
                  },
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "recipientAddress": {
                    "type": "string",
                    "description": "Wallet addres that NFT will be minted to - optional. If empty, the NFT will be in the default Verbwire wallet."
                  },
                  "data": {
                    "type": "string",
                    "description": "Data to be minted in your NFT. If you want attributes viewable on Opensea please see opensea standards [here](https://docs.opensea.io/docs/metadata-standards)."
                  },
                  "quantity": {
                    "type": "string",
                    "description": "Quantity of tokens to be minted - optional"
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "Token ID of NFTs minted. Applicable to ERC1155 tokens only."
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which NFT will be minted"
                  }
                },
                "example": {
                  "name": "SampleNFTName",
                  "description": "Sample Description"
                },
                "default": {
                  "allowPlatformToOperateToken": true,
                  "chain": "sepolia",
                  "quantity": 1
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/mint/collectionReserveMint": {
      "post": {
        "summary": "Collection Mint to a Wallet Address",
        "description": "Mint an NFT using a collection contract, to a provided wallet address. Works with only collection contracts.",
        "tags": [
          "Mint"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "mintQty",
                  "contractAddress",
                  "recipientAddress",
                  "chain"
                ],
                "properties": {
                  "mintQty": {
                    "type": "string",
                    "description": "Quantity to be minted"
                  },
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT Contract"
                  },
                  "recipientAddress": {
                    "type": "string",
                    "description": "Wallet addres that NFT will be minted to"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which NFT will be minted"
                  }
                },
                "example": {
                  "metadataUrl": "https://ipfs.io/ipfs/bafkreijyusklegk4r3jft4fucwvo4pzzwczjecsfg5qrjgp2arevnel2ee/metadata.json",
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/mint/createToken1155": {
      "post": {
        "summary": "Create Token",
        "description": "Create a new ERC1155 Token and mint an initial quantity immediately.",
        "tags": [
          "Mint"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "chain",
                  "contractAddress",
                  "tokenInitialSupply"
                ],
                "properties": {
                  "metadataUrl": {
                    "type": "string",
                    "description": "Url of your metadata"
                  },
                  "tokenInitialSupply": {
                    "type": "string",
                    "description": "Initial quantity of NFTs to be minted with token creation"
                  },
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "recipientAddress": {
                    "type": "string",
                    "description": "Wallet addres that NFT will be minted to - optional. If empty, the NFT will be in the default Verbwire wallet."
                  },
                  "allowPlatformToOperateToken": {
                    "type": "string",
                    "enum": [
                      true,
                      false
                    ]
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which NFT will be minted"
                  }
                },
                "example": {
                  "metadataUrl": "https://ipfs.io/ipfs/bafyreibhwq2msjtoushpb5mwq5oknwavs7bq2vl6nmxc6mripufjy7uyhi/metadata.json",
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "allowPlatformToOperateToken": true,
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/store/file": {
      "post": {
        "summary": "Upload a local file to IPFS",
        "description": "Uploads a local file directly to IPFS. A quick and seamless way to store a file in IPFS. This does not create a metadata json file that can be used as an NFT metadata.",
        "tags": [
          "Store"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "filePath"
                ],
                "properties": {
                  "filePath": {
                    "type": "string",
                    "format": "binary",
                    "description": "Local file to be uploaded"
                  }
                },
                "example": {
                  "filePath": "Your file path"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ipfs_url": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "ipfs_storage": {
                      "ipfs_url": "https://ipfs.io/ipfs/bakiuifsrsklegk4r3jft4fucwvo4pzzwczjecsfg5qrjgp2arevnel2ee"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/store/fileFromUrl": {
      "post": {
        "summary": "Upload a file via URL to IPFS",
        "description": "Uploads a file to IPFS from a provided url. A quick and seamless way to store a file in IPFS. This does not create a metadata json file that can be used as an NFT metadata.",
        "tags": [
          "Store"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "fileUrl"
                ],
                "properties": {
                  "fileUrl": {
                    "type": "string",
                    "description": "Url of file to be uploaded"
                  }
                },
                "example": {
                  "fileUrl": "https://ipfs.io/ipfs/bafkreigjkcafrutdcbicyr3new6aoowgbscf6wgqyty45ckd3xur7ymldm"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ipfs_url": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "ipfs_storage": {
                      "ipfs_url": "https://ipfs.io/ipfs/bafkreifsrskljjuyyk4r3jft4fucwvo4pzzwczjecsfg5qrjgp2arevnel2ee"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property fileUrl of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/store/metadataFromImageUrl": {
      "post": {
        "summary": "Upload a URL to IPFS as NFT metadata",
        "description": "Creates a metadata json file from the provided URL and uploads the metadata file direcly to IPFS, all in one operation.",
        "tags": [
          "Store"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "fileUrl",
                  "name",
                  "description"
                ],
                "properties": {
                  "fileUrl": {
                    "type": "string",
                    "description": "Url of data to be uploaded"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of your metadata"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of your metadata"
                  }
                },
                "example": {
                  "fileUrl": "https://ipfs.io/ipfs/bafkreigjkcafrutdcbicyr3new6aoowgbscf6wgqyty45ckd3xur7ymldm",
                  "name": "TestImageName123",
                  "description": "Test Description"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "metadata_url": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "ipfs_storage": {
                      "name": "Test Name",
                      "description": "This is a description",
                      "metadata_url": "https://ipfs.io/ipfs/bafkreijibsklegk4r3jft4fucwvo4pzzwczjecsfg5qrjgp2arevnel2ee/metadata.json",
                      "ipfs_url": "https://ipfs.io/ipfs/bafybeibvurpouwg33lglxevutbizjj2lhwi5i6t3gz3tfuiijfrthim4q74/943.png"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/store/metadataFromImage": {
      "post": {
        "summary": "Upload local file as metadata to IPFS",
        "description": "Creates a metadata json file from the provided local file, and uploads the metadata file directly to IPFS, all in one operation.",
        "tags": [
          "Store"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "filePath",
                  "name",
                  "description"
                ],
                "properties": {
                  "filePath": {
                    "type": "string",
                    "format": "binary",
                    "description": "Your local file to be uploaded"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of your metadata"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of your metadata"
                  },
                  "data": {
                    "type": "string",
                    "description": "Data to be saved. If you want attributes viewable on Opensea please see opensea standards [here](https://docs.opensea.io/docs/metadata-standards)."
                  }
                },
                "example": {
                  "fileUrl": "https://ipfs.io/ipfs/bafkreigjkcafrutdcbicyr3new6aoowgbscf6wgqyty45ckd3xur7ymldm",
                  "name": "TestImageName123",
                  "description": "Test Description"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "metadata_url": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "ipfs_storage": {
                      "name": "TestName",
                      "description": "This is a description",
                      "metadata_url": "https://ipfs.io/ipfs/bafkreifsrsklegk4r3jft4fucwvo4pzzwczjecsfg5qrjgp2arevnel2ee/metadata.json",
                      "ipfs_url": "https://ipfs.io/ipfs/bafybeibvurpadg33lglxevutbizjj2lhwi5i6t3gz3tfuiijfrthim4q74/943.png"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/store/uploadDirectory": {
      "post": {
        "summary": "Upload a directory to IPFS",
        "description": "Uploads a directory of metadata json files to IPFS. Useful for creating nft collections. The files in your directory should be numbered, example &#58; 1.json, 2.json, 3.json. You will need to upload all the files together at once. The uploaded files to IPFS will all be in the same IPFS directory. Once uploaded to IPFS the file extensions (.json) will be removed. Example &#58; file \"1.json\" will show up as \"1\" in the IPFS directory",
        "tags": [
          "Store"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "filePath"
                ],
                "properties": {
                  "filePath": {
                    "type": "string",
                    "format": "binary",
                    "description": "The directory to be uploaded"
                  }
                },
                "example": {
                  "fileUrl": "https://ipfs.io/ipfs/bafkreigjkcafrutdcbicyr3new6aoowgbscf6wgqyty45ckd3xur7ymldm",
                  "name": "TestImageName",
                  "description": "Test Description"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "metadata_url": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "ipfs_storage": {
                      "name": "Test Name",
                      "description": "This is a description",
                      "metadata_url": "https://ipfs.io/ipfs/bafkreifsrskleg5f53jft4fucwvo4pzzwczjecsfg5qrjgp2arevnel2ee/metadata.json",
                      "ipfs_url": "https://ipfs.io/ipfs/bafyj8rpadg33lglxevutbizjj2lhwi5i6t3gz3tfuiijfrthim4q74/943.png"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/send/quickSend": {
      "post": {
        "summary": "Send Quick-minted NFT across Chains",
        "description": "Sends a quick-minted NFT from one block chain to another. Sending NFTs accross chains is a unique feature of Omnichain NFTs",
        "tags": [
          "Cross-chain Send"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "sourceChain",
                  "destChain",
                  "tokenId",
                  "sourceWalletAddress",
                  "recipientWalletAddress"
                ],
                "properties": {
                  "sourceChain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which your NFT currently is"
                  },
                  "destChain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Destination chain. This is the blockchain where you will be sending your NFT to."
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "NFT token ID"
                  },
                  "sourceWalletAddress": {
                    "type": "string",
                    "description": "Wallet address where you NFT currently is"
                  },
                  "recipientWalletAddress": {
                    "type": "string",
                    "description": "Wallet address to which you will be sending your NFT"
                  }
                },
                "example": {
                  "tokenId": 18,
                  "sourceWalletAddress": "0x8ij87u78okkkjc7shc0987s6cdc"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/send/enableCrossChainSend": {
      "post": {
        "summary": "Enable Cross-chain Sends",
        "description": "Turn on the ability to send your NFT (minted with your created custom contract) across chains",
        "tags": [
          "Cross-chain Send"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "sourceChain",
                  "destChain",
                  "sourceContractAddress",
                  "destContractAddress"
                ],
                "properties": {
                  "sourceChain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Source chain from which your NFT will be moved"
                  },
                  "destChain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "The destination chain, where your NFT will be sent to"
                  },
                  "sourceContractAddress": {
                    "type": "string",
                    "description": "Source contract address"
                  },
                  "destContractAddress": {
                    "type": "string",
                    "description": "Destination contract address"
                  }
                },
                "example": {
                  "sourceContractAddress": "0x8ij87u78okkkjc7shc0987s6cdc"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/send/crossChainSend": {
      "post": {
        "summary": "Send your NFT across Chains",
        "description": "Sends an NFT (minted from your created custom contract) from one block chain to another. Sending NFTs accross chains is a unique feature of Omnichain NFTs",
        "tags": [
          "Cross-chain Send"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "sourceChain",
                  "destChain",
                  "tokenId",
                  "sourceWalletAddress",
                  "recipientWalletAddress",
                  "sourceContractAddress"
                ],
                "properties": {
                  "sourceChain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Source (originating) blockchain of your NFT"
                  },
                  "destChain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Destination blockchain of your NFT"
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "NFT token ID"
                  },
                  "sourceWalletAddress": {
                    "type": "string",
                    "description": "Source (originating) wallet address"
                  },
                  "recipientWalletAddress": {
                    "type": "string",
                    "description": "Destination wallet address. Note this could be the same as your source contract address."
                  },
                  "sourceContractAddress": {
                    "type": "string",
                    "description": "Source contract address"
                  }
                },
                "example": {
                  "tokenId": 18,
                  "sourceWalletAddress": "0x8ij87u78okkkjc7shc0987s6cdc"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/transferToken": {
      "post": {
        "summary": "Transfer Token",
        "description": "Transfer NFT across wallet addresses",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "contractAddress",
                  "fromAddress",
                  "toAddress",
                  "tokenId",
                  "chain"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "fromAddress": {
                    "type": "string",
                    "description": "Wallet Address of Sender"
                  },
                  "toAddress": {
                    "type": "string",
                    "description": "Wallet Address of Recipient"
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "Token ID of NFT to be transferred"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which contract was deployed"
                  }
                },
                "example": {
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/updateTokenMetadata": {
      "post": {
        "summary": "Update NFT Metadata",
        "description": "Update NFT Metadata",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "contractAddress",
                  "chain",
                  "newTokenURI",
                  "tokenId"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "newTokenURI": {
                    "type": "string",
                    "description": "New URI for NFT metadata"
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "TokenID for NFT"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which contract was deployed"
                  }
                },
                "example": {
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/freezeMetadata": {
      "post": {
        "summary": "Freeze NFT Metadata",
        "description": "Freeze metadata on the NFT contract",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "contractAddress",
                  "chain"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which contract was deployed"
                  }
                },
                "example": {
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/setMintPrice": {
      "post": {
        "summary": "Set Mint Price",
        "description": "Set the mint price for your contract",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "contractAddress",
                  "mintPriceInWei",
                  "chain"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "mintPriceInWei": {
                    "type": "string",
                    "description": "Mint price of NFT"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which contract was deployed"
                  }
                },
                "example": {
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/setAllowListMintPrice": {
      "post": {
        "summary": "Set Allowlist Mint Price",
        "description": "Set the allowlist mint price for your contract",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "contractAddress",
                  "allowListMintPriceInWei",
                  "chain"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "allowListMintPriceInWei": {
                    "type": "string",
                    "description": "Allowlist mint price of NFT"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which contract was deployed"
                  }
                },
                "example": {
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/burn": {
      "post": {
        "summary": "Burn NFT",
        "description": "Burn an NFT. Contract types supported are the Collection contract and Simple Contract types.",
        "tags": [
          "Burn"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "contractAddress",
                  "tokenId",
                  "chain"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "token ID of NFT"
                  },
                  "fromAddress": {
                    "type": "string",
                    "description": "For ERC1155 Only. Address from which tokens will be burned"
                  },
                  "quantity": {
                    "type": "string",
                    "description": "For ERC1155 Only. Quantity to be burned"
                  },
                  "contractType": {
                    "type": "string",
                    "enum": [
                      "nft721",
                      "nft1155",
                      "nft721A",
                      "onft721"
                    ],
                    "description": "Type of contract - optional"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which contract was deployed"
                  }
                },
                "example": {
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/withdrawFunds": {
      "post": {
        "summary": "Withdraw Funds",
        "description": "Withdraw funds from your smart contract.",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "chain",
                  "contractAddress"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of contract"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which contract was deployed"
                  }
                },
                "example": {
                  "contractAddress": 2.916124294435724e+47
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/withdrawFundsToWallet": {
      "post": {
        "summary": "Withdraw Funds To A Wallet",
        "description": "Withdraw funds from your smart contract to a specified wallet.",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "chain",
                  "contractAddress",
                  "withdrawAddress"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of contract"
                  },
                  "withdrawAddress": {
                    "type": "string",
                    "description": "Address of wallet to which funds with be withdrawn"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which contract was deployed"
                  }
                },
                "example": {
                  "contractAddress": 2.916124294435724e+47
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/transferOperator": {
      "post": {
        "summary": "Transfer Contract Operator",
        "description": "Transfer the Operator of your deployed collection contract. Works with only collection contracts.",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "chain",
                  "contractAddress",
                  "newOperatorAddress"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string"
                  },
                  "newOperatorAddress": {
                    "type": "string"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ]
                  }
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Transaction": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "blockNumber": {
                            "type": "string"
                          },
                          "timeStamp": {
                            "type": "string"
                          },
                          "hash": {
                            "type": "string"
                          },
                          "nonce": {
                            "type": "string"
                          },
                          "blockHash": {
                            "type": "string"
                          },
                          "from": {
                            "type": "string"
                          },
                          "contractAddress": {
                            "type": "string"
                          },
                          "to": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          },
                          "tokenSymbol": {
                            "type": "string"
                          },
                          "tokenDecimal": {
                            "type": "string"
                          },
                          "transactionIndex": {
                            "type": "string"
                          },
                          "gas": {
                            "type": "string"
                          },
                          "gasPrice": {
                            "type": "string"
                          },
                          "gasUsed": {
                            "type": "string"
                          },
                          "cumulativeGasUsed": {
                            "type": "string"
                          },
                          "input": {
                            "type": "string"
                          },
                          "confirmations": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "blockNumber": "14554041",
                          "timeStamp": "1649540923",
                          "hash": "0x5b492a277270b4e28f0632b747db44a8650e9092488c9c4d4415ad72a433b382",
                          "nonce": "136",
                          "blockHash": "0x5b5a2faa3e89ef2b58b483086619b30024c0a3ebed7bf744090d278e66e52a08",
                          "from": "0x7d77a304290a422d5c003231ffc1160cb73c60fb",
                          "contractAddress": "0x641f2a0f4dfb439870aada9f0d136d62fd80ad07",
                          "to": "0x4e514d9fcb58503dba5bb2b0f477792c03c8426d",
                          "tokenID": "18",
                          "tokenName": "flymeta",
                          "tokenSymbol": "fm",
                          "tokenDecimal": "0",
                          "transactionIndex": "66",
                          "gas": "265806",
                          "gasPrice": "32084697251",
                          "gasUsed": "199525",
                          "cumulativeGasUsed": "7008966",
                          "input": "deprecated",
                          "confirmations": "264962"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/addToAllowList": {
      "post": {
        "summary": "Add addresses to Allowlist",
        "description": "Add an address (or group of addresses) to the allowlist of your NFT contract.",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "chain",
                  "contractAddress",
                  "addresses",
                  "mintSlots"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string"
                  },
                  "addresses": {
                    "type": "string"
                  },
                  "mintSlots": {
                    "type": "string"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ]
                  }
                },
                "example": {
                  "addresses": "0x33145a8499e89b6E0839d237A3056A3735cCaeD5,0x54D404D5870Bdf67B2CFcE5f800D253E9A8B686e,0x3B834EDe1a8c1f130c056a92eb5f1483cF4e8517,0x36D549D8450Bdf67B2CFcE5f800D296E9A8B639f",
                  "mintSlots": "11,13,7,88"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Transaction": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "blockNumber": {
                            "type": "string"
                          },
                          "timeStamp": {
                            "type": "string"
                          },
                          "hash": {
                            "type": "string"
                          },
                          "nonce": {
                            "type": "string"
                          },
                          "blockHash": {
                            "type": "string"
                          },
                          "from": {
                            "type": "string"
                          },
                          "contractAddress": {
                            "type": "string"
                          },
                          "to": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          },
                          "tokenSymbol": {
                            "type": "string"
                          },
                          "tokenDecimal": {
                            "type": "string"
                          },
                          "transactionIndex": {
                            "type": "string"
                          },
                          "gas": {
                            "type": "string"
                          },
                          "gasPrice": {
                            "type": "string"
                          },
                          "gasUsed": {
                            "type": "string"
                          },
                          "cumulativeGasUsed": {
                            "type": "string"
                          },
                          "input": {
                            "type": "string"
                          },
                          "confirmations": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "blockNumber": "14554041",
                          "timeStamp": "1649540923",
                          "hash": "0x5b492a277270b4e28f0632b747db44a8650e9092488c9c4d4415ad72a433b382",
                          "nonce": "136",
                          "blockHash": "0x5b5a2faa3e89ef2b58b483086619b30024c0a3ebed7bf744090d278e66e52a08",
                          "from": "0x7d77a304290a422d5c003231ffc1160cb73c60fb",
                          "contractAddress": "0x641f2a0f4dfb439870aada9f0d136d62fd80ad07",
                          "to": "0x4e514d9fcb58503dba5bb2b0f477792c03c8426d",
                          "tokenID": "18",
                          "tokenName": "flymeta",
                          "tokenSymbol": "fm",
                          "tokenDecimal": "0",
                          "transactionIndex": "66",
                          "gas": "265806",
                          "gasPrice": "32084697251",
                          "gasUsed": "199525",
                          "cumulativeGasUsed": "7008966",
                          "input": "deprecated",
                          "confirmations": "264962"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/initCollectionContract": {
      "post": {
        "summary": "Initialize your collection contract",
        "description": "Set the parameters of your deployed collection contract",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "contractAddress",
                  "maxMintPerAddress",
                  "totalReserveQty",
                  "totalAllowlistQty",
                  "maxSupply",
                  "maxMintableBatchSize",
                  "royaltiesInBps",
                  "royaltiesAddress",
                  "ownerAddress",
                  "baseTokenURI",
                  "allowListMintStartTime",
                  "publicSaleStartTime",
                  "allowlistMintPriceInWei",
                  "publicPriceInWei",
                  "metadataFrozen",
                  "chain"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "maxMintPerAddress": {
                    "type": "string",
                    "description": "Maximum number of NFTs that can be minted per wallet address"
                  },
                  "totalReserveQty": {
                    "type": "string",
                    "description": "Total number of NFTs to be reserved"
                  },
                  "totalAllowlistQty": {
                    "type": "string",
                    "description": "Total number of NFTs planned for your allowlist"
                  },
                  "maxSupply": {
                    "type": "string",
                    "description": "Maximum number of NFTs to be minted on this contract"
                  },
                  "maxMintableBatchSize": {
                    "type": "string",
                    "description": "Maximum number of NFTs that can be minted in one transaction"
                  },
                  "royaltiesInBps": {
                    "type": "string",
                    "description": "Royalties, in basis points. Note, 100 basis points is 1 percent"
                  },
                  "royaltiesAddress": {
                    "type": "string",
                    "description": "Wallet address for your sales royalties"
                  },
                  "ownerAddress": {
                    "type": "string",
                    "description": "Wallet address of contract owner"
                  },
                  "tokenURIPrereveal": {
                    "type": "string",
                    "description": "URI of your pre-reveal image, if applicable"
                  },
                  "baseTokenURI": {
                    "type": "string",
                    "description": "Base token URI. This gets concatenated with your tokenID to return a tokenURI"
                  },
                  "allowListMintStartTime": {
                    "type": "string",
                    "description": "StartTime of allowlist Minting. Time should be in epoch format. See [here](https://www.epochconverter.com/) epoch time conversion."
                  },
                  "publicSaleStartTime": {
                    "type": "string",
                    "description": "StartTime of public Minting. Time should be in epoch format. See [here](https://www.epochconverter.com/) epoch time conversion."
                  },
                  "allowlistMintPriceInWei": {
                    "type": "string",
                    "description": "Mint price for your allow list members. Input price in Wei."
                  },
                  "publicPriceInWei": {
                    "type": "string",
                    "description": "Mint price for public minting, i.e not on allow-list and not reserved. Input price in Wei."
                  },
                  "metadataFrozen": {
                    "type": "string",
                    "enum": [
                      false,
                      true
                    ],
                    "description": "Once set to true you can no longer change the NFT metadata"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which NFT contract will be deployed"
                  }
                },
                "example": {
                  "contractAddress": 1.0480895442482707e+48,
                  "maxMintPerAddress": 5,
                  "totalReserveQty": 500,
                  "totalAllowlistQty": 100,
                  "maxSupply": 1000,
                  "maxMintableBatchSize": 5,
                  "royaltiesInBps": 100,
                  "royaltiesAddress": 1.048089544248271e+48,
                  "ownerAddress": 1.048089544248271e+48,
                  "tokenURIPrereveal": null,
                  "allowListMintStartTime": 1658167690,
                  "publicSaleStartTime": 1658167690,
                  "allowlistMintPriceInWei": 0,
                  "publicPriceInWei": 1,
                  "metadataFrozen": false,
                  "recipientAddress": 1.048089544248271e+48
                },
                "default": {
                  "chain": "sepolia",
                  "metadataFrozen": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/deploy/updateContract": {
      "post": {
        "summary": "Update Collection Contract",
        "description": "Update parameters of your collection contract",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "contractAddress",
                  "chain"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which contract was deployed"
                  },
                  "tokenURIPrereveal": {
                    "type": "string",
                    "description": "URI of your pre-reveal image, if applicable"
                  },
                  "allowListMintStartTime": {
                    "type": "string",
                    "description": "StartTime of allowlist Minting. Time should be in epoch format. See [here](https://www.epochconverter.com/) epoch time conversion."
                  },
                  "publicSaleStartTime": {
                    "type": "string",
                    "description": "StartTime of public Minting. Time should be in epoch format. See [here](https://www.epochconverter.com/) epoch time conversion."
                  },
                  "allowlistMintPriceInWei": {
                    "type": "string",
                    "description": "Mint price for allowlist minting. Input price in Wei."
                  },
                  "publicPriceInWei": {
                    "type": "string",
                    "description": "Mint price for public minting, i.e not on allow-list and not reserved. Input price in Wei."
                  },
                  "metadataFrozen": {
                    "type": "string",
                    "description": "Once set to true you can no longer change the NFT metadata"
                  },
                  "baseTokenURI": {
                    "type": "string",
                    "description": "Base token URI. This gets concatenated with your tokenID to return a tokenURI"
                  }
                },
                "example": {
                  "contractName": "TestContractName",
                  "contractSymbol": "TestContractSymbol",
                  "recipientAddress": 1.048089544248271e+48
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/setPaymentPrice": {
      "post": {
        "summary": "Set a payment price for your Commerce Contract",
        "description": "Set the minimum acceptable payment price for your contract. This will be the minimum price payable to your smart contract. This functionality only applies to Commerce Contracts. Commerce contracts can be used for receiving payments seamlessly.",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "contractAddress",
                  "newPaymentPriceInWei",
                  "chain"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "newPaymentPriceInWei": {
                    "type": "string",
                    "description": "Payment price. Minimum price payable to your contract."
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which contract was deployed"
                  }
                },
                "example": {
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/togglePausedState": {
      "post": {
        "summary": "Pause/Unpause a Commerce Contract",
        "description": "Pause/Unpause your commerce contract. Pausing your commerce contract stops it from being able to continue receiving payments. You can pause/unpause your contract anytime.",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "contractAddress",
                  "chain"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which contract was deployed"
                  }
                },
                "example": {
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/togglePublicMinting": {
      "post": {
        "summary": "Pause/Unpause public minting",
        "description": "Pause/Unpause public minting on your NFT contract. Use this feature to activate/deactivate public minting on your NFT contract. Only advanced contracts can pause/unpause public minting.",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "contractAddress",
                  "chain"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which contract was deployed"
                  }
                },
                "example": {
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/setMaxMintQuantityPerBatch": {
      "post": {
        "summary": "Set max batch size for minting",
        "description": "Set the max quantity that can be minted in one batch. This feature is available only to advanced contracts.",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "contractAddress",
                  "chain",
                  "quantity"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string",
                    "description": "Address of NFT contract"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which contract was deployed"
                  },
                  "quantity": {
                    "type": "string",
                    "description": "Max size that can be minted in one batch"
                  }
                },
                "example": {
                  "recipientAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nft/update/addPayee": {
      "post": {
        "summary": "Add payee to contract",
        "description": "Enable a wallet address to receive funds from a contract. Use payeeShares to control payout ratio.",
        "tags": [
          "Update"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "chain",
                  "contractAddress",
                  "payeeAddress",
                  "payeeShares"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string"
                  },
                  "payeeAddress": {
                    "type": "string",
                    "description": "The wallet address that will receive funds"
                  },
                  "payeeShares": {
                    "type": "string",
                    "description": "Payout ratio. If you have just one payee this number doesn't matter. Example, for two payees with payee shares of 80 and 20 it means they split revenues with a 80%/20% ratio."
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ]
                  }
                },
                "example": {
                  "payeeAddress": "0x33145a8499e89b6E0839d237A3056A3735cCaeD5",
                  "payeeShares": "100"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Transaction": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "blockNumber": {
                            "type": "string"
                          },
                          "timeStamp": {
                            "type": "string"
                          },
                          "hash": {
                            "type": "string"
                          },
                          "nonce": {
                            "type": "string"
                          },
                          "blockHash": {
                            "type": "string"
                          },
                          "from": {
                            "type": "string"
                          },
                          "contractAddress": {
                            "type": "string"
                          },
                          "to": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          },
                          "tokenSymbol": {
                            "type": "string"
                          },
                          "tokenDecimal": {
                            "type": "string"
                          },
                          "transactionIndex": {
                            "type": "string"
                          },
                          "gas": {
                            "type": "string"
                          },
                          "gasPrice": {
                            "type": "string"
                          },
                          "gasUsed": {
                            "type": "string"
                          },
                          "cumulativeGasUsed": {
                            "type": "string"
                          },
                          "input": {
                            "type": "string"
                          },
                          "confirmations": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "blockNumber": "14554041",
                          "timeStamp": "1649540923",
                          "hash": "0x5b492a277270b4e28f0632b747db44a8650e9092488c9c4d4415ad72a433b382",
                          "nonce": "136",
                          "blockHash": "0x5b5a2faa3e89ef2b58b483086619b30024c0a3ebed7bf744090d278e66e52a08",
                          "from": "0x7d77a304290a422d5c003231ffc1160cb73c60fb",
                          "contractAddress": "0x641f2a0f4dfb439870aada9f0d136d62fd80ad07",
                          "to": "0x4e514d9fcb58503dba5bb2b0f477792c03c8426d",
                          "tokenID": "18",
                          "tokenName": "flymeta",
                          "tokenSymbol": "fm",
                          "tokenDecimal": "0",
                          "transactionIndex": "66",
                          "gas": "265806",
                          "gasPrice": "32084697251",
                          "gasUsed": "199525",
                          "cumulativeGasUsed": "7008966",
                          "input": "deprecated",
                          "confirmations": "264962"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/userOps/deployedContracts": {
      "get": {
        "summary": "Retrieve deployed contracts",
        "description": "Produce a list of all your deployed contracts",
        "tags": [
          "User"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Transaction": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "blockNumber": {
                            "type": "string"
                          },
                          "timeStamp": {
                            "type": "string"
                          },
                          "hash": {
                            "type": "string"
                          },
                          "nonce": {
                            "type": "string"
                          },
                          "blockHash": {
                            "type": "string"
                          },
                          "from": {
                            "type": "string"
                          },
                          "contractAddress": {
                            "type": "string"
                          },
                          "to": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          },
                          "tokenSymbol": {
                            "type": "string"
                          },
                          "tokenDecimal": {
                            "type": "string"
                          },
                          "transactionIndex": {
                            "type": "string"
                          },
                          "gas": {
                            "type": "string"
                          },
                          "gasPrice": {
                            "type": "string"
                          },
                          "gasUsed": {
                            "type": "string"
                          },
                          "cumulativeGasUsed": {
                            "type": "string"
                          },
                          "input": {
                            "type": "string"
                          },
                          "confirmations": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "blockNumber": "14554041",
                          "timeStamp": "1649540923",
                          "hash": "0x5b492a277270b4e28f0632b747db44a8650e9092488c9c4d4415ad72a433b382",
                          "nonce": "136",
                          "blockHash": "0x5b5a2faa3e89ef2b58b483086619b30024c0a3ebed7bf744090d278e66e52a08",
                          "from": "0x7d77a304290a422d5c003231ffc1160cb73c60fb",
                          "contractAddress": "0x641f2a0f4dfb439870aada9f0d136d62fd80ad07",
                          "to": "0x4e514d9fcb58503dba5bb2b0f477792c03c8426d",
                          "tokenID": "18",
                          "tokenName": "flymeta",
                          "tokenSymbol": "fm",
                          "tokenDecimal": "0",
                          "transactionIndex": "66",
                          "gas": "265806",
                          "gasPrice": "32084697251",
                          "gasUsed": "199525",
                          "cumulativeGasUsed": "7008966",
                          "input": "deprecated",
                          "confirmations": "264962"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/userOps/nftsMinted": {
      "get": {
        "summary": "Retrieve your minted NFTs",
        "description": "Produce a list of all your minted NFTs",
        "tags": [
          "User"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Transaction": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "blockNumber": {
                            "type": "string"
                          },
                          "timeStamp": {
                            "type": "string"
                          },
                          "hash": {
                            "type": "string"
                          },
                          "nonce": {
                            "type": "string"
                          },
                          "blockHash": {
                            "type": "string"
                          },
                          "from": {
                            "type": "string"
                          },
                          "contractAddress": {
                            "type": "string"
                          },
                          "to": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          },
                          "tokenSymbol": {
                            "type": "string"
                          },
                          "tokenDecimal": {
                            "type": "string"
                          },
                          "transactionIndex": {
                            "type": "string"
                          },
                          "gas": {
                            "type": "string"
                          },
                          "gasPrice": {
                            "type": "string"
                          },
                          "gasUsed": {
                            "type": "string"
                          },
                          "cumulativeGasUsed": {
                            "type": "string"
                          },
                          "input": {
                            "type": "string"
                          },
                          "confirmations": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "blockNumber": "14554041",
                          "timeStamp": "1649540923",
                          "hash": "0x5b492a277270b4e28f0632b747db44a8650e9092488c9c4d4415ad72a433b382",
                          "nonce": "136",
                          "blockHash": "0x5b5a2faa3e89ef2b58b483086619b30024c0a3ebed7bf744090d278e66e52a08",
                          "from": "0x7d77a304290a422d5c003231ffc1160cb73c60fb",
                          "contractAddress": "0x641f2a0f4dfb439870aada9f0d136d62fd80ad07",
                          "to": "0x4e514d9fcb58503dba5bb2b0f477792c03c8426d",
                          "tokenID": "18",
                          "tokenName": "flymeta",
                          "tokenSymbol": "fm",
                          "tokenDecimal": "0",
                          "transactionIndex": "66",
                          "gas": "265806",
                          "gasPrice": "32084697251",
                          "gasUsed": "199525",
                          "cumulativeGasUsed": "7008966",
                          "input": "deprecated",
                          "confirmations": "264962"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/userOps/ipfsUploads": {
      "get": {
        "summary": "Retrieve your uploaded IPFS files",
        "description": "Produce a list of all your minted NFTs",
        "tags": [
          "User"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Transaction": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "blockNumber": {
                            "type": "string"
                          },
                          "timeStamp": {
                            "type": "string"
                          },
                          "hash": {
                            "type": "string"
                          },
                          "nonce": {
                            "type": "string"
                          },
                          "blockHash": {
                            "type": "string"
                          },
                          "from": {
                            "type": "string"
                          },
                          "contractAddress": {
                            "type": "string"
                          },
                          "to": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          },
                          "tokenSymbol": {
                            "type": "string"
                          },
                          "tokenDecimal": {
                            "type": "string"
                          },
                          "transactionIndex": {
                            "type": "string"
                          },
                          "gas": {
                            "type": "string"
                          },
                          "gasPrice": {
                            "type": "string"
                          },
                          "gasUsed": {
                            "type": "string"
                          },
                          "cumulativeGasUsed": {
                            "type": "string"
                          },
                          "input": {
                            "type": "string"
                          },
                          "confirmations": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "blockNumber": "14554041",
                          "timeStamp": "1649540923",
                          "hash": "0x5b492a277270b4e28f0632b747db44a8650e9092488c9c4d4415ad72a433b382",
                          "nonce": "136",
                          "blockHash": "0x5b5a2faa3e89ef2b58b483086619b30024c0a3ebed7bf744090d278e66e52a08",
                          "from": "0x7d77a304290a422d5c003231ffc1160cb73c60fb",
                          "contractAddress": "0x641f2a0f4dfb439870aada9f0d136d62fd80ad07",
                          "to": "0x4e514d9fcb58503dba5bb2b0f477792c03c8426d",
                          "tokenID": "18",
                          "tokenName": "flymeta",
                          "tokenSymbol": "fm",
                          "tokenDecimal": "0",
                          "transactionIndex": "66",
                          "gas": "265806",
                          "gasPrice": "32084697251",
                          "gasUsed": "199525",
                          "cumulativeGasUsed": "7008966",
                          "input": "deprecated",
                          "confirmations": "264962"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/userOps/transactionDetails": {
      "post": {
        "summary": "Retrieve specific transaction details",
        "description": "Get details for a specific transaction",
        "tags": [
          "User"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "transactionId"
                ],
                "properties": {
                  "transactionId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Transaction": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "blockNumber": {
                            "type": "string"
                          },
                          "timeStamp": {
                            "type": "string"
                          },
                          "hash": {
                            "type": "string"
                          },
                          "nonce": {
                            "type": "string"
                          },
                          "blockHash": {
                            "type": "string"
                          },
                          "from": {
                            "type": "string"
                          },
                          "contractAddress": {
                            "type": "string"
                          },
                          "to": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          },
                          "tokenSymbol": {
                            "type": "string"
                          },
                          "tokenDecimal": {
                            "type": "string"
                          },
                          "transactionIndex": {
                            "type": "string"
                          },
                          "gas": {
                            "type": "string"
                          },
                          "gasPrice": {
                            "type": "string"
                          },
                          "gasUsed": {
                            "type": "string"
                          },
                          "cumulativeGasUsed": {
                            "type": "string"
                          },
                          "input": {
                            "type": "string"
                          },
                          "confirmations": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "blockNumber": "14554041",
                          "timeStamp": "1649540923",
                          "hash": "0x5b492a277270b4e28f0632b747db44a8650e9092488c9c4d4415ad72a433b382",
                          "nonce": "136",
                          "blockHash": "0x5b5a2faa3e89ef2b58b483086619b30024c0a3ebed7bf744090d278e66e52a08",
                          "from": "0x7d77a304290a422d5c003231ffc1160cb73c60fb",
                          "contractAddress": "0x641f2a0f4dfb439870aada9f0d136d62fd80ad07",
                          "to": "0x4e514d9fcb58503dba5bb2b0f477792c03c8426d",
                          "tokenID": "18",
                          "tokenName": "flymeta",
                          "tokenSymbol": "fm",
                          "tokenDecimal": "0",
                          "transactionIndex": "66",
                          "gas": "265806",
                          "gasPrice": "32084697251",
                          "gasUsed": "199525",
                          "cumulativeGasUsed": "7008966",
                          "input": "deprecated",
                          "confirmations": "264962"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/userOps/payeeAtIndex": {
      "post": {
        "summary": "Get Payee",
        "description": "Display details of Payee at a certain Index.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "chain",
                  "contractAddress",
                  "index"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string"
                  },
                  "index": {
                    "type": "string"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ]
                  }
                },
                "example": {
                  "contractAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Transaction": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "blockNumber": {
                            "type": "string"
                          },
                          "timeStamp": {
                            "type": "string"
                          },
                          "hash": {
                            "type": "string"
                          },
                          "nonce": {
                            "type": "string"
                          },
                          "blockHash": {
                            "type": "string"
                          },
                          "from": {
                            "type": "string"
                          },
                          "contractAddress": {
                            "type": "string"
                          },
                          "to": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          },
                          "tokenSymbol": {
                            "type": "string"
                          },
                          "tokenDecimal": {
                            "type": "string"
                          },
                          "transactionIndex": {
                            "type": "string"
                          },
                          "gas": {
                            "type": "string"
                          },
                          "gasPrice": {
                            "type": "string"
                          },
                          "gasUsed": {
                            "type": "string"
                          },
                          "cumulativeGasUsed": {
                            "type": "string"
                          },
                          "input": {
                            "type": "string"
                          },
                          "confirmations": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "blockNumber": "14554041",
                          "timeStamp": "1649540923",
                          "hash": "0x5b492a277270b4e28f0632b747db44a8650e9092488c9c4d4415ad72a433b382",
                          "nonce": "136",
                          "blockHash": "0x5b5a2faa3e89ef2b58b483086619b30024c0a3ebed7bf744090d278e66e52a08",
                          "from": "0x7d77a304290a422d5c003231ffc1160cb73c60fb",
                          "contractAddress": "0x641f2a0f4dfb439870aada9f0d136d62fd80ad07",
                          "to": "0x4e514d9fcb58503dba5bb2b0f477792c03c8426d",
                          "tokenID": "18",
                          "tokenName": "flymeta",
                          "tokenSymbol": "fm",
                          "tokenDecimal": "0",
                          "transactionIndex": "66",
                          "gas": "265806",
                          "gasPrice": "32084697251",
                          "gasUsed": "199525",
                          "cumulativeGasUsed": "7008966",
                          "input": "deprecated",
                          "confirmations": "264962"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/userOps/allowListSharesForAddress": {
      "post": {
        "summary": "Get Allowlist Shares",
        "description": "Display Allowlist shares for a specific address.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "chain",
                  "contractAddress",
                  "allowListAddress"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string"
                  },
                  "allowListAddress": {
                    "type": "string"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ]
                  }
                },
                "example": {
                  "contractAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Transaction": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "blockNumber": {
                            "type": "string"
                          },
                          "timeStamp": {
                            "type": "string"
                          },
                          "hash": {
                            "type": "string"
                          },
                          "nonce": {
                            "type": "string"
                          },
                          "blockHash": {
                            "type": "string"
                          },
                          "from": {
                            "type": "string"
                          },
                          "contractAddress": {
                            "type": "string"
                          },
                          "to": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          },
                          "tokenSymbol": {
                            "type": "string"
                          },
                          "tokenDecimal": {
                            "type": "string"
                          },
                          "transactionIndex": {
                            "type": "string"
                          },
                          "gas": {
                            "type": "string"
                          },
                          "gasPrice": {
                            "type": "string"
                          },
                          "gasUsed": {
                            "type": "string"
                          },
                          "cumulativeGasUsed": {
                            "type": "string"
                          },
                          "input": {
                            "type": "string"
                          },
                          "confirmations": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "blockNumber": "14554041",
                          "timeStamp": "1649540923",
                          "hash": "0x5b492a277270b4e28f0632b747db44a8650e9092488c9c4d4415ad72a433b382",
                          "nonce": "136",
                          "blockHash": "0x5b5a2faa3e89ef2b58b483086619b30024c0a3ebed7bf744090d278e66e52a08",
                          "from": "0x7d77a304290a422d5c003231ffc1160cb73c60fb",
                          "contractAddress": "0x641f2a0f4dfb439870aada9f0d136d62fd80ad07",
                          "to": "0x4e514d9fcb58503dba5bb2b0f477792c03c8426d",
                          "tokenID": "18",
                          "tokenName": "flymeta",
                          "tokenSymbol": "fm",
                          "tokenDecimal": "0",
                          "transactionIndex": "66",
                          "gas": "265806",
                          "gasPrice": "32084697251",
                          "gasUsed": "199525",
                          "cumulativeGasUsed": "7008966",
                          "input": "deprecated",
                          "confirmations": "264962"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/userOps/contractPaymentDetails": {
      "post": {
        "summary": "Get Payee Payment Details",
        "description": "Display payment details for a specific payee of a contract.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "chain",
                  "contractAddress",
                  "payeeAddress"
                ],
                "properties": {
                  "contractAddress": {
                    "type": "string"
                  },
                  "payeeAddress": {
                    "type": "string"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ]
                  }
                },
                "example": {
                  "contractAddress": "0x33145a6258e89b6E0796d237A3048A3852cCaeQ7"
                },
                "default": {
                  "chain": "sepolia"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Transaction": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "blockNumber": {
                            "type": "string"
                          },
                          "timeStamp": {
                            "type": "string"
                          },
                          "hash": {
                            "type": "string"
                          },
                          "nonce": {
                            "type": "string"
                          },
                          "blockHash": {
                            "type": "string"
                          },
                          "from": {
                            "type": "string"
                          },
                          "contractAddress": {
                            "type": "string"
                          },
                          "to": {
                            "type": "string"
                          },
                          "tokenID": {
                            "type": "string"
                          },
                          "tokenName": {
                            "type": "string"
                          },
                          "tokenSymbol": {
                            "type": "string"
                          },
                          "tokenDecimal": {
                            "type": "string"
                          },
                          "transactionIndex": {
                            "type": "string"
                          },
                          "gas": {
                            "type": "string"
                          },
                          "gasPrice": {
                            "type": "string"
                          },
                          "gasUsed": {
                            "type": "string"
                          },
                          "cumulativeGasUsed": {
                            "type": "string"
                          },
                          "input": {
                            "type": "string"
                          },
                          "confirmations": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "blockNumber": "14554041",
                          "timeStamp": "1649540923",
                          "hash": "0x5b492a277270b4e28f0632b747db44a8650e9092488c9c4d4415ad72a433b382",
                          "nonce": "136",
                          "blockHash": "0x5b5a2faa3e89ef2b58b483086619b30024c0a3ebed7bf744090d278e66e52a08",
                          "from": "0x7d77a304290a422d5c003231ffc1160cb73c60fb",
                          "contractAddress": "0x641f2a0f4dfb439870aada9f0d136d62fd80ad07",
                          "to": "0x4e514d9fcb58503dba5bb2b0f477792c03c8426d",
                          "tokenID": "18",
                          "tokenName": "flymeta",
                          "tokenSymbol": "fm",
                          "tokenDecimal": "0",
                          "transactionIndex": "66",
                          "gas": "265806",
                          "gasPrice": "32084697251",
                          "gasUsed": "199525",
                          "cumulativeGasUsed": "7008966",
                          "input": "deprecated",
                          "confirmations": "264962"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/userOps/contractBalance": {
      "get": {
        "summary": "Get contract balance",
        "description": "Displays the amount of funds left on the contract",
        "tags": [
          "User"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contractAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Contract address"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "sepolia",
                "mumbai",
                "fuji",
                "optimism-sepolia",
                "arbitrum-sepolia",
                "base-sepolia",
                "fantom-testnet",
                "ethereum",
                "polygon",
                "avalanche",
                "optimism",
                "arbitrum",
                "base",
                "fantom",
                "bsc",
                "bsc-testnet",
                "goerli",
                "optimism-goerli",
                "arbitrum-goerli",
                "base-goerli"
              ],
              "default": "ethereum"
            },
            "description": "Blockchain"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nft_details": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "symbol": {
                          "type": "string"
                        },
                        "tokenId": {
                          "type": "string"
                        },
                        "owner": {
                          "type": "string"
                        },
                        "tokenURI": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "name": "Azuki",
                        "symbol": "AZUKI",
                        "tokenId": 40,
                        "owner": "0x333e58f8d77a8add1032CfdD781383E934f92d6F",
                        "tokenURI": "https://ikzttp.mypinata.cloud/ipfs/QmQFkLSQysj94s5GvTHPyzTxrawwtjgiiYS2TBLgrvw8CW/40"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/nft/userOps/contractDetails": {
      "get": {
        "summary": "Get Contract Details",
        "description": "Displays details of your contract",
        "tags": [
          "User"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contractAddress",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Contract address"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "sepolia",
                "mumbai",
                "fuji",
                "optimism-sepolia",
                "arbitrum-sepolia",
                "base-sepolia",
                "fantom-testnet",
                "ethereum",
                "polygon",
                "avalanche",
                "optimism",
                "arbitrum",
                "base",
                "fantom",
                "bsc",
                "bsc-testnet",
                "goerli",
                "optimism-goerli",
                "arbitrum-goerli",
                "base-goerli"
              ],
              "default": "ethereum"
            },
            "description": "Blockchain"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nft_details": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "symbol": {
                          "type": "string"
                        },
                        "tokenId": {
                          "type": "string"
                        },
                        "owner": {
                          "type": "string"
                        },
                        "tokenURI": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "name": "Azuki",
                        "symbol": "AZUKI",
                        "tokenId": 40,
                        "owner": "0x333e58f8d77a8add1032CfdD781383E934f92d6F",
                        "tokenURI": "https://ikzttp.mypinata.cloud/ipfs/QmQFkLSQysj94s5GvTHPyzTxrawwtjgiiYS2TBLgrvw8CW/40"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 401,
                  "message": "Please authenticate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 403,
                  "message": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": 404,
                  "message": "Not found"
                }
              }
            }
          }
        }
      }
    },
    "/transfers/userClaim/email/asset": {
      "post": {
        "summary": "Email Digital Asset",
        "description": "Send a new digital asset to anyone via email",
        "tags": [
          "Transfers"
        ],
        "security": [
          {
            "APIKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "destinationEmail",
                  "contractAddress",
                  "chain"
                ],
                "properties": {
                  "destinationEmail": {
                    "type": "string",
                    "description": "Email of recipient of your digital asset"
                  },
                  "contractAddress": {
                    "type": "string",
                    "description": "Contract address"
                  },
                  "chain": {
                    "type": "string",
                    "enum": [
                      "sepolia",
                      "mumbai",
                      "fuji",
                      "optimism-sepolia",
                      "arbitrum-sepolia",
                      "base-sepolia",
                      "fantom-testnet",
                      "ethereum",
                      "polygon",
                      "avalanche",
                      "optimism",
                      "arbitrum",
                      "base",
                      "fantom",
                      "bsc",
                      "bsc-testnet",
                      "goerli",
                      "optimism-goerli",
                      "arbitrum-goerli",
                      "base-goerli"
                    ],
                    "description": "Blockchain on which NFT will be minted"
                  },
                  "metadataUrl": {
                    "type": "string",
                    "description": "Url of your metadata. If left blank a default test metadata url will be used."
                  },
                  "claimType": {
                    "type": "string",
                    "enum": [
                      "SINGLE_GASLESS_MINT",
                      "GASLESS_MINT_FROM_TEMPLATE"
                    ],
                    "description": "Your claim type - Defaults to SINGLE_GASLESS_MINT"
                  },
                  "note": {
                    "type": "string",
                    "description": "Note to be emailed to recipient of digital asset - Optional"
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "Token ID of asset to be minted. Applicable to ERC1155 tokens only."
                  }
                },
                "example": {
                  "note": "Enjoy your digital asset",
                  "description": "Sample Description"
                },
                "default": {
                  "chain": "sepolia",
                  "claimType": "SINGLE_GASLESS_MINT"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_details": {
                      "type": "object",
                      "properties": {
                        "transactionHash": {
                          "type": "string"
                        },
                        "blockExplorer": {
                          "type": "string"
                        },
                        "transactionID": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
                        "transactionID": "6327921e418fb0564c4d063b",
                        "status": "Sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "code": 400,
                    "message": "Cannot read property filePath of null"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "admin"
            ]
          }
        },
        "example": {
          "id": "5ebac534954b54139806c112",
          "email": "fake@example.com",
          "name": "fake name",
          "role": "user"
        }
      },
      "Token": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg",
          "expires": "2020-05-12T16:18:04.793Z"
        }
      },
      "AuthTokens": {
        "type": "object",
        "properties": {
          "access": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string"
              },
              "expires": {
                "type": "string",
                "format": "date-time"
              }
            },
            "example": {
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg",
              "expires": "2020-05-12T16:18:04.793Z"
            }
          },
          "refresh": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string"
              },
              "expires": {
                "type": "string",
                "format": "date-time"
              }
            },
            "example": {
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg",
              "expires": "2020-05-12T16:18:04.793Z"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "NFTData": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "contractAddress": {
              "type": "string"
            },
            "tokenID": {
              "type": "string"
            },
            "tokenName": {
              "type": "string"
            }
          }
        },
        "example": [
          {
            "contractAddress": "0xed5af388653567af2f388e6224dc7c4b3241c544",
            "tokenID": 40,
            "tokenName": "Azuki"
          },
          {
            "contractAddress": "0x23581767a106ae21c074b2276d25e5c3e136a68b",
            "tokenID": 6504,
            "tokenName": "Moonbirds"
          }
        ]
      },
      "HoldingsData": {
        "type": "object",
        "properties": {
          "contractAddress": {
            "type": "string"
          },
          "tokenID": {
            "type": "string"
          },
          "tokenName": {
            "type": "string"
          }
        },
        "example": {
          "contractAddress": "0xed5af388653567af2f388e6224dc7c4b3241c544",
          "tokenID": 40,
          "tokenName": "Azuki"
        }
      },
      "NFTDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "tokenId": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "tokenURI": {
            "type": "string"
          }
        },
        "example": {
          "name": "Azuki",
          "symbol": "AZUKI",
          "tokenId": 40,
          "owner": "0x333e58f8d77a8add1032CfdD781383E934f92d6F",
          "tokenURI": "https://ikzttp.mypinata.cloud/ipfs/QmQFkLSQysj94s5GvTHPyzTxrawwtjgiiYS2TBLgrvw8CW/40"
        }
      },
      "VwTransaction": {
        "type": "object",
        "properties": {
          "transactionHash": {
            "type": "string"
          },
          "blockExplorer": {
            "type": "string"
          },
          "transactionID": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "example": {
          "transactionHash": "0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
          "blockExplorer": "https://goerli.etherscan.io/tx/0x37f21bbb309ae9d5d9104af6c9f9a4f0d4beaee7563f49436ffda22800fa2c7c",
          "transactionID": "6327921e418fb0564c4d063b",
          "status": "Sent"
        }
      },
      "Transaction": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "blockNumber": {
              "type": "string"
            },
            "timeStamp": {
              "type": "string"
            },
            "hash": {
              "type": "string"
            },
            "nonce": {
              "type": "string"
            },
            "blockHash": {
              "type": "string"
            },
            "from": {
              "type": "string"
            },
            "contractAddress": {
              "type": "string"
            },
            "to": {
              "type": "string"
            },
            "tokenID": {
              "type": "string"
            },
            "tokenName": {
              "type": "string"
            },
            "tokenSymbol": {
              "type": "string"
            },
            "tokenDecimal": {
              "type": "string"
            },
            "transactionIndex": {
              "type": "string"
            },
            "gas": {
              "type": "string"
            },
            "gasPrice": {
              "type": "string"
            },
            "gasUsed": {
              "type": "string"
            },
            "cumulativeGasUsed": {
              "type": "string"
            },
            "input": {
              "type": "string"
            },
            "confirmations": {
              "type": "string"
            }
          }
        },
        "example": [
          {
            "blockNumber": "14554041",
            "timeStamp": "1649540923",
            "hash": "0x5b492a277270b4e28f0632b747db44a8650e9092488c9c4d4415ad72a433b382",
            "nonce": "136",
            "blockHash": "0x5b5a2faa3e89ef2b58b483086619b30024c0a3ebed7bf744090d278e66e52a08",
            "from": "0x7d77a304290a422d5c003231ffc1160cb73c60fb",
            "contractAddress": "0x641f2a0f4dfb439870aada9f0d136d62fd80ad07",
            "to": "0x4e514d9fcb58503dba5bb2b0f477792c03c8426d",
            "tokenID": "18",
            "tokenName": "flymeta",
            "tokenSymbol": "fm",
            "tokenDecimal": "0",
            "transactionIndex": "66",
            "gas": "265806",
            "gasPrice": "32084697251",
            "gasUsed": "199525",
            "cumulativeGasUsed": "7008966",
            "input": "deprecated",
            "confirmations": "264962"
          }
        ]
      },
      "floorPrice": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "floorAsk": {
            "type": "number"
          },
          "previousFloorAsk": {
            "type": "number"
          },
          "contractId": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "example": {
          "source": "X2Y2",
          "eventType": "floorPriceChangeEvent",
          "kind": "cancel",
          "slug": "boredapeyachtclub",
          "chain": "ethereum",
          "floorAsk": 79,
          "previousFloorAsk": 78.8,
          "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
          "timestamp": "2022-09-26T07:33:26.000Z"
        }
      },
      "historicalStats": {
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "contractId": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "floorSale": {
            "type": "number"
          },
          "salesCount": {
            "type": "integer"
          },
          "rank": {
            "type": "integer"
          },
          "volume": {
            "type": "number"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "example": {
          "eventType": "dailyHistoryEvent",
          "slug": "boredapeyachtclub",
          "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
          "chain": "ethereum",
          "floorSale": 71,
          "salesCount": 7,
          "rank": 7,
          "volume": 575.1,
          "timestamp": "2022-08-01T04:00:00.000Z"
        }
      },
      "salesEvent": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "orderSide": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "sale": {
            "type": "number"
          },
          "saleUsd": {
            "type": "number"
          },
          "contractId": {
            "type": "string"
          },
          "tokenId": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "block": {
            "type": "string"
          },
          "txHash": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "example": {
          "source": "opensea.io",
          "eventType": "salesEvent",
          "orderSide": "ask",
          "slug": "boredapeyachtclub",
          "chain": "ethereum",
          "sale": 769.9,
          "saleUsd": 1174405.54931,
          "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
          "tokenId": "6588",
          "from": "0x29e2ffcbece02e9b9d0470afa7a7c0b9c81923ff",
          "to": "0xec7e5a49ee8e95a89a1a881bbf1aae2ec854d790",
          "block": "15448013",
          "txHash": "0xb2b2276d9073807bf64527200a74aa49581394b4f9cdb99d403578167d8fb559",
          "timestamp": "2022-08-31T21:41:52.000Z"
        }
      },
      "transferEvent": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer"
          },
          "block": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "contractId": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "tokenId": {
            "type": "string"
          },
          "txHash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "example": {
          "amount": 1,
          "block": "15451208",
          "chain": "ethereum",
          "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
          "slug": "boredapeyachtclub",
          "from": "0x3b968d2d299b895a5fcf3bba7a64ad0f566e6f88",
          "to": "0x70b97a0da65c15dfb0ffa02aee6fa36e507c2762",
          "tokenId": "7397",
          "txHash": "0xf41bcba23e8f6421ccae857be1cc96b06c6ab2fdb10dd4e07ab72882078345ec",
          "id": "dc2224522229e2ffcbece02e9b9d0470afa7a7c0b9c81923ff",
          "timestamp": "2022-09-01T06:05:10.000Z"
        }
      },
      "ownershipData": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "contractId": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "tokenCount": {
            "type": "integer"
          },
          "floorAskPrice": {
            "type": "number"
          },
          "onSaleCount": {
            "type": "integer"
          },
          "topBidValue": {
            "type": "number"
          },
          "totalBidValue": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string"
          }
        },
        "example": {
          "address": "0xdbfd76af2157dc15ee4e57f3f942bb45ba84af24",
          "chain": "ethereum",
          "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
          "slug": "boredapeyachtclub",
          "tokenCount": 280,
          "floorAskPrice": null,
          "onSaleCount": 0,
          "topBidValue": 1.146,
          "totalBidValue": 320.88,
          "id": "dc2224522229e2ffcbece02e9b9d0470afa7a7c0b9c81923ff",
          "lastUpdated": "2022-09-27T19:08:11.675Z"
        }
      },
      "collectionData": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "discordUrl": {
            "type": "string"
          },
          "externalUrl": {
            "type": "string"
          },
          "floorSale": {
            "type": "object",
            "properties": {
              "1day": {
                "type": "number"
              },
              "7day": {
                "type": "number"
              },
              "30day": {
                "type": "number"
              }
            }
          },
          "image": {
            "type": "string"
          },
          "onSaleCount": {
            "type": "integer"
          },
          "primaryContract": {
            "type": "string"
          },
          "rank": {
            "type": "object",
            "properties": {
              "1day": {
                "type": "integer"
              },
              "7day": {
                "type": "integer"
              },
              "30day": {
                "type": "integer"
              },
              "allTime": {
                "type": "integer"
              }
            }
          },
          "royalties": {
            "type": "object",
            "properties": {
              "bps": {
                "type": "number"
              },
              "recipient": {
                "type": "string"
              }
            }
          },
          "slug": {
            "type": "string"
          },
          "tokenCount": {
            "type": "integer"
          },
          "twitterUsername": {
            "type": "string"
          },
          "volume": {
            "type": "object",
            "properties": {
              "1day": {
                "type": "number"
              },
              "7day": {
                "type": "number"
              },
              "30day": {
                "type": "number"
              },
              "allTime": {
                "type": "number"
              }
            }
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "chain": "ethereum",
          "description": "ethereum",
          "contractId": "The Bored Ape Yacht Club is a collection of 10,000 unique Bored Ape NFTs— unique digital collectibles living on the Ethereum blockchain...",
          "discordUrl": "https://discord.gg/3P5K3dzgdB",
          "externalUrl": "http://www.boredapeyachtclub.com/",
          "floorSale": {
            "1day": 65,
            "7day": 67.69,
            "30day": 68.681
          },
          "image": "https://i.seadn.io/gae/Ju9CkWtV-1Okvf45wo8UctR-M9He2PjILP0oOvxE89AyiPPGtrR3gysu1Zgy0hjd2xKIgjJJtWIc0ybj4Vd7wv8t3pxDGHoJBzDB?w=500&auto=format",
          "onSaleCount": 764,
          "primaryContract": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
          "rank": {
            "1day": 2,
            "7day": 2,
            "30day": 1,
            "allTime": 3
          },
          "royalties": {
            "bps": 250,
            "recipient": "0xa858ddc0445d8131dac4d1de01f834ffcba52ef1"
          },
          "slug": "boredapeyachtclub",
          "tokenCount": 10000,
          "twitterUsername": "BoredApeYC",
          "volume": {
            "1day": 723.17,
            "7day": 3657.87519,
            "30day": 23609.35266,
            "allTime": 793507.11896
          },
          "id": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d"
        }
      },
      "nftAttributes": {
        "type": "object",
        "properties": {
          "contractId": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "count": {
            "type": "number"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
          "slug": "boredapeyachtclub",
          "key": "Background",
          "value": "Orange",
          "count": 1273,
          "id": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d:ethereum:Background->Orange"
        }
      },
      "nftAttributesWithTokens": {
        "type": "object",
        "properties": {
          "contractId": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "count": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "tokens": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "contractId": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
          "slug": "boredapeyachtclub",
          "key": "Mouth",
          "value": "Bored Unshaven Pizza",
          "count": 1273,
          "id": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d:ethereum:Background->Orange",
          "tokens": [
            "208",
            "1459",
            "2402",
            "2550",
            "2587",
            "2794",
            "3046",
            "3722",
            "3953",
            "4448",
            "4922",
            "5353",
            "5491",
            "5615",
            "5800",
            "6445",
            "7253",
            "7265",
            "7653",
            "7678",
            "8921",
            "8976",
            "9455",
            "9542",
            "9606",
            "9796"
          ]
        }
      }
    },
    "responses": {
      "DuplicateEmail": {
        "description": "Email already taken",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "number"
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "example": {
              "code": 400,
              "message": "Email already taken"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "number"
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "example": {
              "code": 401,
              "message": "Please authenticate"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "number"
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "example": {
              "code": 403,
              "message": "Forbidden"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "number"
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "example": {
              "code": 404,
              "message": "Not found"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "BearerAPIKey": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "APIKey"
      },
      "APIKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    }
  },
  "tags": [
    {
      "name": "Data",
      "description": "NFT Data Endpoint"
    },
    {
      "name": "Store",
      "description": "IPFS Storage Endpoint"
    }
  ]
}